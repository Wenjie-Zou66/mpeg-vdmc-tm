diff --git a/source/App/TAppEncoder/TAppEncCfg.cpp b/source/App/TAppEncoder/TAppEncCfg.cpp
index cb35ec2..3f1d1ff 100644
--- a/source/App/TAppEncoder/TAppEncCfg.cpp
+++ b/source/App/TAppEncoder/TAppEncCfg.cpp
@@ -845,6 +845,12 @@ Bool TAppEncCfg::parseCfg( Int argc, TChar* argv[] )
 	  ("BlockToPatchFile",                            m_blockToPatchFileName,                      string(""), "Input block to patch file name")
 	  ("OccupancyMapFile",                            m_occupancyMapFileName,                      string(""), "Input occupancy map file name")
 	  ("PatchInfoFile",                               m_patchInfoFileName,                         string(""), "Input patch info file name")
+#endif sdf
+#if PCC_RDO_EXT (TAppEncCfg)
+  ("UsePccRDO",                                       m_usePCCRDO,                                      false, "Use modified RDO for PCC content")
+#endif
+#if !PCC_ME_EXT //PCC_RDO_EXT && !PCC_ME_EXT (TAppEncCfg)
+  ("OccupancyMapFile",                                m_occupancyMapFileName,                      string(""), "Input occupancy map file name")
 #endif
   ("SourceWidth,-wdt",                                m_iSourceWidth,                                       0, "Source picture width")
   ("SourceHeight,-hgt",                               m_iSourceHeight,                                      0, "Source picture height")
diff --git a/source/App/TAppEncoder/TAppEncCfg.h b/source/App/TAppEncoder/TAppEncCfg.h
index 58f3fd9..2dbd97f 100644
--- a/source/App/TAppEncoder/TAppEncCfg.h
+++ b/source/App/TAppEncoder/TAppEncCfg.h
@@ -87,6 +87,12 @@ protected:
   std::string m_blockToPatchFileName;
   std::string m_occupancyMapFileName;
   std::string m_patchInfoFileName;
+#endif
+#if PCC_RDO_EXT
+  Bool        m_usePCCRDO;
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  std::string m_occupancyMapFileName;
 #endif
   // Lambda modifiers
   Double    m_adLambdaModifier[ MAX_TLAYER ];                 ///< Lambda modifier array for each temporal layer
diff --git a/source/App/TAppEncoder/TAppEncTop.cpp b/source/App/TAppEncoder/TAppEncTop.cpp
index d6e864f..ce6680e 100644
--- a/source/App/TAppEncoder/TAppEncTop.cpp
+++ b/source/App/TAppEncoder/TAppEncTop.cpp
@@ -97,7 +97,12 @@ Void TAppEncTop::xInitLibCfg()
 	//m_cTencTop.setPatchInfoFileName                                 ( m_patchInfoFileName );
   }
 #endif
-
+#if PCC_RDO_EXT
+  m_cTEncTop.setUsePCCRDOExt(m_usePCCRDO);
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  m_cTEncTop.setOccupancyMapFileName(m_occupancyMapFileName);
+#endif
   m_cTEncTop.setProfile                                           ( m_profile);
   m_cTEncTop.setLevel                                             ( m_levelTier, m_level);
   m_cTEncTop.setProgressiveSourceFlag                             ( m_progressiveSourceFlag);
diff --git a/source/App/utils/BitrateTargeting/encodeCommand.sh b/source/App/utils/BitrateTargeting/encodeCommand.sh
deleted file mode 100644
index 250c9bc..0000000
--- a/source/App/utils/BitrateTargeting/encodeCommand.sh
+++ /dev/null
@@ -1,258 +0,0 @@
-#! /bin/sh
-
-# The copyright in this software is being made available under the BSD
-# License, included below. This software may be subject to other third party
-# and contributor rights, including patent rights, and no such rights are
-# granted under this license.  
-#
-# Copyright (c) 2010-2014, ITU/ISO/IEC
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are met:
-#
-#  * Redistributions of source code must retain the above copyright notice,
-#    this list of conditions and the following disclaimer.
-#  * Redistributions in binary form must reproduce the above copyright notice,
-#    this list of conditions and the following disclaimer in the documentation
-#    and/or other materials provided with the distribution.
-#  * Neither the name of the ITU/ISO/IEC nor the names of its contributors may
-#    be used to endorse or promote products derived from this software without
-#    specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
-# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-# THE POSSIBILITY OF SUCH DAMAGE.
-
-# Outputs a command to run the encoder for a given set of arguments.  The encoder typically requires a lot of arguments to run, so this script can be more convenient than running the encoder direcly because it automatically generates many of the arguments.
-
-# "Include" encode.shl which contains common shell script code related to encoding
-SUB_TOOLS_DIRECTORY=$(echo "$0" | sed -e 's/[^\/]*$//')
-. ${SUB_TOOLS_DIRECTORY}encode.shl
-
-USE_LOG_FILE_OPTION="-l"
-INPUT_DIRECTORY_OPTION="-id"
-NUM_FRAMES_OPTION="-f"
-
-function outputUsageAndExit {
-  local EXECUTABLE_USAGE_STRING=executable
-  local INPUT_DIRECTORY_USAGE_STRING=inputDirectory
-  local CONFIGURATION_PATH_USAGE_STRING=configurationPath
-  local CONFIGURATION_DIRECTORY_USAGE_STRING=configurationDirectory
-  local NUM_FRAMES_USAGE_STRING=numFrames
-  
-  echo "Usage: $0 $CONFIGURATION_IDENTIFIER_OPTION $CONFIGURATION_IDENTIFIER_USAGE_STRING ($CONFIGURATION_PATH_OPTION $CONFIGURATION_PATH_USAGE_STRING -or- $CONFIGURATION_DIRECTORY_OPTION $CONFIGURATION_DIRECTORY_USAGE_STRING) $Q_OPTION $Q_USAGE_STRING $EXECUTABLE_OPTION $EXECUTABLE_USAGE_STRING [$NUM_FRAMES_OPTION $NUM_FRAMES_USAGE_STRING] [$EXTRA_ARGUMENTS_OPTION $EXTRA_ARGUMENTS_USAGE_STRING] $OUTPUT_DIRECTORY_OPTION $OUTPUT_DIRECTORY_USAGE_STRING [$USE_LOG_FILE_OPTION] [$INPUT_DIRECTORY_OPTION $INPUT_DIRECTORY_USAGE_STRING] $INPUT_NAME_USAGE_STRING" >&2
-  outputConfigurationIdentifierUsage
-  echo "${USAGE_INDENT}$CONFIGURATION_PATH_USAGE_STRING is the path of the configuration file to use.  Either this or $CONFIGURATION_DIRECTORY_USAGE_STRING must be specified (but not both)." >&2
-  echo "${USAGE_INDENT}$CONFIGURATION_DIRECTORY_USAGE_STRING is the path of the directory that contains the configuration files.  The particular file will be chosen based on $CONFIGURATION_IDENTIFIER_USAGE_STRING.  Either this or $CONFIGURATION_PATH_USAGE_STRING must be specified (but not both)." >&2
-  outputQUsage
-  echo "${USAGE_INDENT}$EXECUTABLE_USAGE_STRING is the path of the encoder executable." >&2
-  echo "${USAGE_INDENT}$NUM_FRAMES_USAGE_STRING is the number of frames to encode.  If omitted, the entire sequence will be encoded." >&2
-  echo "${USAGE_INDENT}$EXTRA_ARGUMENTS_USAGE_STRING is any extra arguments that should be passed on to the encoder." >&2
-  outputOutputDirectoryUsage
-  echo "${USAGE_INDENT}If $USE_LOG_FILE_OPTION is specified, the encoder will output to a log file.  Otherwise it will output to the standard output." >&2
-  echo "${USAGE_INDENT}$INPUT_DIRECTORY_USAGE_STRING is the directory that contains the sequences.  The default value is the SEQUENCE_DIR environment variable." >&2
-  outputInputNameUsage
-  
-  exit 1
-}
-
-# Used to lookup the width, height, number of frames, and frame rate for a given sequence
-table=`printf "${table}\nNebutaFestival_2560x1600_60_10bit_crop          2560   1600   300        60"`
-table=`printf "${table}\nSteamLocomotiveTrain_2560x1600_60_10bit_crop    2560   1600   300        60"`
-table=`printf "${table}\nTraffic_2560x1600_30_crop                       2560   1600   150        30"`
-table=`printf "${table}\nPeopleOnStreet_2560x1600_30_crop                2560   1600   150        30"`
-table=`printf "${table}\nBQTerrace_1920x1080_60                          1920   1080   600        60"`
-table=`printf "${table}\nBasketballDrive_1920x1080_50                    1920   1080   500        50"`
-table=`printf "${table}\nCactus_1920x1080_50                             1920   1080   500        50"`
-table=`printf "${table}\nKimono1_1920x1080_24                            1920   1080   240        24"`
-table=`printf "${table}\nParkScene_1920x1080_24                          1920   1080   240        24"`
-table=`printf "${table}\nvidyo1_720p_60                                  1280    720   600        60"`
-table=`printf "${table}\nvidyo3_720p_60                                  1280    720   600        60"`
-table=`printf "${table}\nvidyo4_720p_60                                  1280    720   600        60"`
-table=`printf "${table}\nRaceHorses_832x480_30                            832    480   300        30"`
-table=`printf "${table}\nBQMall_832x480_60                                832    480   600        60"`
-table=`printf "${table}\nPartyScene_832x480_50                            832    480   500        50"`
-table=`printf "${table}\nBasketballDrill_832x480_50                       832    480   500        50"`
-table=`printf "${table}\nRaceHorses_416x240_30                            416    240   300        30"`
-table=`printf "${table}\nBQSquare_416x240_60                              416    240   600        60"`
-table=`printf "${table}\nBlowingBubbles_416x240_50                        416    240   500        50"`
-table=`printf "${table}\nBasketballPass_416x240_50                        416    240   500        50"`
-table=`printf "${table}\nBasketballDrillText_832x480_50                   832    480   500        50"`
-table=`printf "${table}\nChinaspeed_1024x768_30                          1024    768   500        30"`
-table=`printf "${table}\nSlideEditing_1280x720_30                        1280    720   300        30"`
-table=`printf "${table}\nSlideShow_1280x720_20                           1280    720   500        20"`
-
-EXECUTABLE_STRING="executable ($EXECUTABLE_OPTION)"
-INPUT_DIRECTORY_STRING="input directory ($INPUT_DIRECTORY_OPTION)"
-CONFIGURATION_PATH_STRING="configuration path ($CONFIGURATION_PATH_OPTION)"
-CONFIGURATION_DIRECTORY_STRING="configuration directory ($CONFIGURATION_DIRECTORY_OPTION)"
-
-inputDirectory="$SEQUENCE_DIR"  # The default input directory is taken from this environment variable
-
-# For every argument $1
-while [ "" != "$*" ] ; do
-  case $1 in
-    $USE_LOG_FILE_OPTION)
-      useLogFile=$1
-    ;;
-    -*)
-      checkDollarTwo "$1" "$2"
-      case $1 in
-        $EXECUTABLE_OPTION) executable=$2 ;;
-        $INPUT_DIRECTORY_OPTION) inputDirectory=$2 ;;
-        $EXTRA_ARGUMENTS_OPTION) extraArguments=$2 ;;
-        $Q_OPTION) q=$2 ;;
-        $OUTPUT_DIRECTORY_OPTION) outputDirectory=$2 ;;
-        $CONFIGURATION_IDENTIFIER_OPTION) configurationIdentifier=$2 ;;
-        $CONFIGURATION_PATH_OPTION) configurationPath=$2 ;;
-        $CONFIGURATION_DIRECTORY_OPTION) configurationDirectory=$2 ;;
-        $NUM_FRAMES_OPTION) numFrames=$2 ;;
-        *)
-          printf "You entered an invalid option: \"$1\".\n" >&2
-          outputUsageAndExit
-        ;;
-      esac
-      shift
-    ;;
-    *)
-      if [[ "" == $inputName ]] ; then
-        inputName=$1
-      else
-        printf "You entered too many arguments.\n" >&2
-        outputUsageAndExit
-      fi
-    ;;
-  esac
-  
-  shift
-done
-
-verifyProvided "$EXECUTABLE_STRING" "$executable"
-verifyNotDirectory "$EXECUTABLE_STRING" "$executable"
-
-verifyDirectory "$INPUT_DIRECTORY_STRING" "$inputDirectory"
-
-verifyProvided "$Q_STRING" "$q"
-verifyQ $q
-
-verifyProvided "$OUTPUT_DIRECTORY_STRING" "$outputDirectory"
-verifyDirectory "$OUTPUT_DIRECTORY_STRING" "$outputDirectory"
-
-verifyProvided "$CONFIGURATION_IDENTIFIER_STRING" "$configurationIdentifier"
-verifyConfigurationIdentifier "$configurationIdentifier"
-
-# Validate $configurationPath or $configurationDirectory
-if [[ $configurationPath != "" ]] ; then
-  verifyNotDirectory "$CONFIGURATION_PATH_STRING" "$configurationPath"
-else
-  if [[ "" == $configurationDirectory ]] ; then
-    printf "You must enter a $CONFIGURATION_PATH_STRING or $CONFIGURATION_DIRECTORY_STRING.\n" >&2
-    outputUsageAndExit
-  else
-    verifyDirectory "$CONFIGURATION_DIRECTORY_STRING" "$configurationDirectory"
-  fi
-fi
-
-verifyProvided "$INPUT_NAME_STRING" "$inputName"
-verifyNotDirectory "$INPUT_NAME_STRING" "$inputName"
-
-# If configurationPath is not already populated, populate it based on the configuration directory and the configuration identifier
-if [[ "" == $configurationPath ]] ; then
-  configurationPath="${configurationDirectory}encoder_"
-  case $configurationIdentifier in
-    ldLC) configurationPath="${configurationPath}lowdelay_loco" ;;
-    raLC) configurationPath="${configurationPath}randomaccess_loco" ;;
-    inLC) configurationPath="${configurationPath}intra_loco" ;;
-    ldHE) configurationPath="${configurationPath}lowdelay" ;;
-    raHE) configurationPath="${configurationPath}randomaccess" ;;
-    *)    configurationPath="${configurationPath}intra" ;;  # inHE
-  esac
-  configurationPath="${configurationPath}.cfg"
-fi
-
-# Validate the input name and populate masterLine which contains the line from the table for the given sequence
-masterLine=`printf "$table" | grep -i "^$inputName "`
-if [[ "" == $masterLine ]] ; then
-  printf "Invalid input name.\n" >&2
-  outputUsageAndExit
-fi
-
-# If numFrames is not yet initialized, initialize it by looking up the values in the table
-if [[ "" == $numFrames ]] ; then
-  numFrames=`printf -- "$masterLine" | awk '{ print $4 }'`
-fi
-
-# Initialize these variables by looking up the values in the table
-frameRate=`printf -- "$masterLine" | awk '{ print $5 }'`
-width=`printf -- "$masterLine" | awk '{ print $2 }'`
-height=`printf -- "$masterLine" | awk '{ print $3 }'`
-
-# Initialize intraPeriod
-case $configurationIdentifier in
-  ld*)
-    intraPeriod="-1"
-  ;;
-  ra*)
-    if [[ 20 == "$frameRate" ]] ; then
-      intraPeriod="16"
-    else
-      intraPeriod=$(expr "$frameRate" + 4)
-      intraPeriod=$(expr "$intraPeriod" / 8)
-      intraPeriod=$(expr "$intraPeriod" \* 8)
-    fi
-  ;;
-  in*)
-    intraPeriod="1"
-  ;;
-  *)
-    outputConfigurationIdentifierErrorAndExit
-  ;;
-esac
-
-# Initialize tenBit if the given sequence is 10-bit
-printf -- "$inputName" | grep -i '10bit' > /dev/null
-case $? in
-  0)  tenBit="--InputBitDepth=10 "
-    ;;
-  1)  ;;
-  *)  exit $?
-    ;;
-esac
-
-outputPathBegin="${outputDirectory}${inputName}_${configurationIdentifier}_q${q}"
-
-# Output the command
-printf -- "$executable "
-printf -- "-c $configurationPath "
-printf -- "-i $inputDirectory$inputName.yuv "
-printf -- "-f $numFrames "
-printf -- "-fr $frameRate "
-printf -- "-wdt $width "
-printf -- "-hgt $height "
-printf -- "-ip $intraPeriod "
-printf -- "$tenBit"
-if [[ $tenBit != "" ]] ; then
-  printf " "
-fi
-printf -- "$extraArguments"
-if [[ $extraArguments != "" ]] ; then
-  printf -- " "
-fi
-printf -- "-q $q "
-printf -- "-b $outputPathBegin.bin "
-printf -- "-o $outputPathBegin.yuv "
-if [[ "" != $useLogFile ]] ; then
-  printf -- "&> $outputPathBegin.log"
-fi
-printf "\n"
-
-exit 0
diff --git a/source/App/utils/BitrateTargeting/targetBitrates.sh b/source/App/utils/BitrateTargeting/targetBitrates.sh
deleted file mode 100644
index 246b9c2..0000000
--- a/source/App/utils/BitrateTargeting/targetBitrates.sh
+++ /dev/null
@@ -1,409 +0,0 @@
-#! /bin/sh
-
-# The copyright in this software is being made available under the BSD
-# License, included below. This software may be subject to other third party
-# and contributor rights, including patent rights, and no such rights are
-# granted under this license.  
-#
-# Copyright (c) 2010-2014, ITU/ISO/IEC
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are met:
-#
-#  * Redistributions of source code must retain the above copyright notice,
-#    this list of conditions and the following disclaimer.
-#  * Redistributions in binary form must reproduce the above copyright notice,
-#    this list of conditions and the following disclaimer in the documentation
-#    and/or other materials provided with the distribution.
-#  * Neither the name of the ITU/ISO/IEC nor the names of its contributors may
-#    be used to endorse or promote products derived from this software without
-#    specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
-# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-# THE POSSIBILITY OF SUCH DAMAGE.
-
-
-SUB_TOOLS_DIRECTORY=$(echo "$0" | sed -e 's/[^\/]*$//')
-. ${SUB_TOOLS_DIRECTORY}encode.shl
-
-LAMBDA_MODIFIER_PREFIX="LM"
-
-RESUME_MODE_OPTION="-rm"
-TARGET_BITRATES_OPTION="-tb"
-INITIAL_LAMBDA_MODIFIERS_OPTION="-il"
-ENCODE_COMMAND_ARGS_OPTION="-ca"
-
-function outputUsageAndExit {
-  local TARGET_BITRATES_USAGE_STRING=targetBitrates
-  local INITIAL_LAMBDA_MODIFIERS_USAGE_STRING=initialLambdaModifiers
-  local ENCODE_COMMAND_ARGS_USAGE_STRING=encodeCommandArgs
-  
-  echo "Usage: $0 [$RESUME_MODE_OPTION] $CONFIGURATION_IDENTIFIER_OPTION $CONFIGURATION_IDENTIFIER_USAGE_STRING $Q_OPTION $Q_USAGE_STRING $TARGET_BITRATES_OPTION $TARGET_BITRATES_USAGE_STRING [$INITIAL_LAMBDA_MODIFIERS_OPTION $INITIAL_LAMBDA_MODIFIERS_USAGE_STRING] [$ENCODE_COMMAND_ARGS_OPTION $ENCODE_COMMAND_ARGS_USAGE_STRING] [$EXTRA_ARGUMENTS_OPTION $EXTRA_ARGUMENTS_USAGE_STRING] $OUTPUT_DIRECTORY_OPTION $OUTPUT_DIRECTORY_USAGE_STRING $INPUT_NAME_USAGE_STRING" >&2
-  echo "${USAGE_INDENT}$RESUME_MODE_OPTION engages resume mode which allows the user to resume an execution that was interrupted before completion."
-  outputConfigurationIdentifierUsage
-  outputQUsage
-  echo "${USAGE_INDENT}$TARGET_BITRATES_USAGE_STRING is the target bitrates.  For example: \"23:35 24:3473242 etc...\"." >&2
-  echo "${USAGE_INDENT}$INITIAL_LAMBDA_MODIFIERS_USAGE_STRING is the Lambda-modifiers to use for the first guess.  For example: \"$-{LAMBDA_MODIFIER_PREFIX}23 1e0 $-{LAMBDA_MODIFIER_PREFIX}24 0.98 etc...\"" >&2
-  echo "${USAGE_INDENT}$ENCODE_COMMAND_ARGS_USAGE_STRING is the extra arguments to be passed to encodeCommand.sh.  The common arguments that are available to both $0 and encodeCommand.sh should not be passed though this argument.  For example, don't pass $Q_OPTION here because it is an option of $0.  $EXECUTABLE_OPTION and ($CONFIGURATION_PATH_OPTION or $CONFIGURATION_DIRECTORY_OPTION) must be passed through this argument.  For example, \"$ENCODE_COMMAND_ARGS_OPTION '$EXECUTABLE_OPTION ~/bin/encode.exe $CONFIGURATION_DIRECTORY_OPTION ~/cfg/'\"." >&2
-  echo "${USAGE_INDENT}$EXTRA_ARGUMENTS_USAGE_STRING specifies extra arguments to be passed directly to the encoder (not to encodeCommand.sh)." >&2
-  outputOutputDirectoryUsage
-  outputInputNameUsage
-  
-  exit 1
-}
-
-NORMAL_MODE="NORMAL_MODE"
-RESUME_MODE="RESUME_MODE"
-mode="$NORMAL_MODE"
-
-# For every argument $1
-while [ "" != "$*" ] ; do
-  case $1 in
-    $RESUME_MODE_OPTION)
-      mode="$RESUME_MODE"
-    ;;
-    -*)
-      checkDollarTwo "$1" "$2"
-      case $1 in
-        $EXTRA_ARGUMENTS_OPTION) extraArguments=$2 ;;
-        $Q_OPTION) q=$2 ;;
-        $OUTPUT_DIRECTORY_OPTION) outputDirectory=$2 ;;
-        $CONFIGURATION_IDENTIFIER_OPTION) configurationIdentifier=$2 ;;
-        $TARGET_BITRATES_OPTION) targetBitrates=$2 ;;
-        $INITIAL_LAMBDA_MODIFIERS_OPTION) initialLambdaModifiers=$2 ;;
-        $ENCODE_COMMAND_ARGS_OPTION) encodeCommandArgs=$2 ;;
-        *)
-          printf "You entered an invalid option: \"$1\".\n" >&2
-          outputUsageAndExit
-        ;;
-      esac
-      shift
-    ;;
-    *)
-      if [[ "" == $inputName ]] ; then
-        inputName=$1
-      else
-        printf "You entered too many arguments.\n" >&2
-        outputUsageAndExit
-      fi
-    ;;
-  esac
-  
-  shift
-done
-
-verifyProvided "$Q_STRING" "$q"
-verifyQ $q
-
-verifyProvided "$OUTPUT_DIRECTORY_STRING" "$outputDirectory"
-verifyDirectory "$OUTPUT_DIRECTORY_STRING" "$outputDirectory"
-
-verifyProvided "$CONFIGURATION_IDENTIFIER_STRING" "$configurationIdentifier"
-verifyConfigurationIdentifier "$configurationIdentifier"
-
-verifyProvided "target bitrates ($TARGET_BITRATES_OPTION)" "$targetBitrates"
-verifyProvided "$INPUT_NAME_STRING" "$inputName"
-
-outputPathBegin="${outputDirectory}${inputName}_${configurationIdentifier}_q${q}"
-logPath="$outputPathBegin.log"
-metaLogPath="${outputPathBegin}_meta.log"
-
-TRUE=true
-
-# Outputs "$TRUE" if the given file exist.  Outputs nothing if the given file does not exist.  The first argument is the path to the supposed file.
-function doesFileExist {
-  ls $1 &> /dev/null
-  if [[ 0 == "$?" ]] ; then
-    echo "$TRUE"
-  fi
-}
-
-# Validate the mode (normal or resume) based on whether or not the meta-log file already exists
-if [[ "$TRUE" == "$(doesFileExist "$metaLogPath")" ]] ; then
-  if [[ "$NORMAL_MODE" == "$mode" ]] ; then
-    echo "$metaLogPath already exists.  Consider using resume-mode." >&2
-    outputUsageAndExit
-  else  # Resume-mode
-    cat "$metaLogPath"  # Output the pre-existing meta-log so we can resume where we left off
-  fi
-else  # Meta-log file does not exist
-  if [[ "$RESUME_MODE" == "$mode" ]] ; then
-    echo "$metaLogPath does not exist and resume-mode is enabled." >&2
-    outputUsageAndExit
-  fi
-fi
-
-# Outputs the number of elements in the given bitrate vector
-function bitrateVectorSize {
-  echo "$1" | sed -e 's/[^ ]//g' | wc -c | sed -e 's/^ *//'
-}
-
-# Initialize targetBitrateVectorSize
-targetBitrateVectorSize="$(bitrateVectorSize "$targetBitrates")"
-
-# Outputs the product of the two input values
-function multiply {
-  echo | awk "{print $1 * $2}"
-}
-
-# Extracts the bitrate at the given index from the given bitrate vector.  The first argument is the given index and the second argument in the given bitrate vector.
-function extractBitrateFromVector {
-  local localIndex=$(expr "$1" "+" "1")
-  echo "$2" | awk "{ print \$$localIndex }"
-}
-
-# Outputs a bitrate vector by multiplying the $targetBitrates vector by a given scalar.  The first argument is the given scalar.
-function populateBitrates {
-  local lI=0
-  local lResult=""
-  while true ; do
-    local lTargetBitrate=$(extractBitrateFromVector "$lI" "$targetBitrates")
-    if [[ "" == "$lTargetBitrate" ]] ; then
-      break;
-    fi
-    local lNew=$(multiply "$lTargetBitrate" "$1")
-    lResult="$lResult $lNew"
-    ((++lI))
-  done
-  echo "$lResult" | sed -e 's/^ //'
-}
-
-# Initialize the ranges
-outerRangeMins=$(populateBitrates "0.980")
-innerRangeMins=$(populateBitrates "0.985")
-innerRangeMaxs=$(populateBitrates "1.015")
-outerRangeMaxs=$(populateBitrates "1.020")
-
-# Outputs the given string to the meta-log (both the file and stdout) with no newline character.  The first argument is the string to output.
-function outputToMetaLogNoNewline {
-  toPrint=`echo $1 | sed -e 's/%/%%/g'`
-  printf -- "$toPrint"
-  printf -- "$toPrint" >> $metaLogPath
-}
-
-# Outputs the given string to the meta-log (both the file and stdout) with a newline character.  The first argument is the string to output.
-function outputToMetaLogWithNewline {
-  echo "$1"
-  echo "$1" >> $metaLogPath
-}
-
-# Extracts the Lambda-modifier at the given index from $lambdaModifiers.  The first argument is the given index.
-function extractLambdaModifier {
-  printf -- "$lambdaModifiers" | sed -e 's/^-//' | sed -e 's/ -/\
-/g' | grep "${LAMBDA_MODIFIER_PREFIX}$1 " | sed -e 's/^[^ ]* //'
-}
-
-# Outputs the given Lambda-modifier with a fixed number of decimal points.  The first argument is the given Lambda-modifier.
-function formatLambdaModifier {
-  printf "%.7f" "$1"
-}
-
-# Outputs $lambdaModifiers to the meta-log with proper formatting
-function outputLambdaModifiersToMetaLog {
-  local lI=0
-  local lLambdaModifier=$(extractLambdaModifier "$lI")
-  local lLambdaModifier=$(formatLambdaModifier "$lLambdaModifier")
-  local lOutput="-${LAMBDA_MODIFIER_PREFIX}$lI $lLambdaModifier"
-  while true ; do
-    ((++lI))
-    local lLambdaModifier=$(extractLambdaModifier "$lI")
-    if [[ "" == "$lLambdaModifier" ]] ; then
-      break
-    fi
-    local lLambdaModifier=$(formatLambdaModifier "$lLambdaModifier")
-    local lOutput="$lOutput -${LAMBDA_MODIFIER_PREFIX}$lI $lLambdaModifier"
-  done
-  outputToMetaLogNoNewline "$lOutput;"
-}
-
-# Initialize lambdaModifiers and output it to the meta-log
-if [[ "$RESUME_MODE" == "$mode" ]] ; then
-  if [[ "" == "$initialLambdaModifiers" ]] ; then  # If no initial lambda-modifiers provided, use default value
-    lambdaModifiers=$(tail -n 1 < "$metaLogPath" | sed -e 's/;$//')
-  else  # Initial lambda-modifiers provided
-    echo "You cannot use $RESUME_MODE and specify the initial lambda-modifiers.  In resume-mode, the lambda-modifiers will be retreived from the last line of the meta-log." >&2
-    outputUsageAndExit
-  fi
-else
-  if [[ "" == "$initialLambdaModifiers" ]] ; then  # If no initial lambda-modifiers provided, use default value
-    lambdaModifiers="-${LAMBDA_MODIFIER_PREFIX}0 1"
-    for (( i=1; i<"$targetBitrateVectorSize"; ++i )); do
-      lambdaModifiers="$lambdaModifiers -${LAMBDA_MODIFIER_PREFIX}${i} 1"
-    done
-  else  # Initial lambda-modifiers provided
-    lambdaModifiers="$initialLambdaModifiers"
-  fi
-  outputLambdaModifiersToMetaLog
-fi
-
-# Calculates the difference percentage between the given target bitrate and the given bitrate, appropriately formats this difference percentage, and then outputs it.  The first argument is the given target bitrate and the second argument is the given bitrate.
-function calculateAndFormatDifferencePercentage {
-  # Calculate the result and format it with the right number of decimal places
-  local result=$(echo | awk "{print 100*($2-$1)/$1}")
-  local result=$(printf "%.3f" "$result")
-  
-  # Separate the sign from the result
-  local sign=$(echo "$result" | sed -e 's/[^-]*$//')
-  if [[ "$sign" != "-" ]] ; then
-    local sign="+"
-  fi
-  local result=$(echo "$result" | sed -e 's/^-//')
-  
-  # Pad leading zereos to make two digits before the decimal point
-  if [[ 2 == $(echo "$result" | sed -e 's/\..*$//' | wc -c | sed -e 's/^ *//') ]] ; then
-    local result="0$result"
-  fi
-  
-  # Output the result including the sign and the percent sign
-  echo "${sign}${result}%"
-}
-
-# Outputs $TRUE i.f.f. the first argument is less than the second argument
-function lessOrEqual {
-  echo | awk "{ if($1 < $2) print \"$TRUE\" }"
-}
-
-# Outputs $TRUE i.f.f. the second argument is greater than the first argument and less than the third argument ($1 < $2 < $3)
-function isInRange {
-  if [[ "$TRUE" == $(lessOrEqual "$1" "$2") ]] ; then
-    if [[ "$TRUE" == $(lessOrEqual "$2" "$3") ]] ; then
-      echo "$TRUE"
-    fi
-  fi
-}
-
-# From the given bitrate vector, outputs the "bad" bitrates by filtering out the "good" bitrates.  The first argument is the index of the last good bitrate and the second argument is the given bitrate vector.  If the first argument is -1, then the given bitrate vector is outputted in its entirety.
-function filterOutGoodBitrates {
-  local result="$2"
-  for (( i=0; i<="$1"; ++i )); do
-    result=$(echo "$result" | sed -e 's/^[^ ]* //')
-  done
-  echo "$result"
-}
-
-# Outputs a given line from the given variable.  The first argument is the line number to output and the second argument is the given variable to extract the line from.
-function outputLine {
-  echo "$2" | head -n "$(expr "$1" + 1)" | tail -n 1
-}
-
-# Initialize iterationCount
-if [[ "$RESUME_MODE" == "$mode" ]] ; then
-  iterationCount=$(wc -l < "$metaLogPath" | sed -e 's/^ *//')
-else
-  iterationCount=0
-fi
-
-ITERATION_COUNT_LIMIT=50  # The number of attempts to make before giving up
-
-while true ; do  # The main loop
-  
-  # Run the encoder
-  sh ${SUB_TOOLS_DIRECTORY}encodeCommand.sh $inputName $encodeCommandArgs $CONFIGURATION_IDENTIFIER_OPTION $configurationIdentifier $Q_OPTION $q $OUTPUT_DIRECTORY_OPTION $outputDirectory -ea "$extraArguments $lambdaModifiers" | sh > $logPath
-  if [[ $? != 0 ]] ; then
-    printf "Unexpected exit status from encodeCommand.sh\n" >&2
-    exit 1
-  fi
-  
-  # Extract and output the bitrates
-  bitrates=`${SUB_TOOLS_DIRECTORY}extractBitrates.exe < $logPath`
-  outputToMetaLogNoNewline "$bitrates;"
-  
-  # Make sure that the index set of the extracted bitrates matches the index set of the target bitrates
-  if [[ "$targetBitrateVectorSize" != "$(bitrateVectorSize "$bitrates")" ]] ; then
-    echo "Index set from the extracted bitrates does not match the index set from the target bitrates" >&2
-    exit 1
-  fi
-  
-  # Calculate the bitrate difference percentages and output them to the meta-log
-  percentages="$(calculateAndFormatDifferencePercentage "$(extractBitrateFromVector "0" "$targetBitrates")" "$(extractBitrateFromVector "0" "$bitrates")")"
-  for (( i=1; i<"$targetBitrateVectorSize"; ++i )); do
-    percentages="$percentages $(calculateAndFormatDifferencePercentage "$(extractBitrateFromVector "$i" "$targetBitrates")" "$(extractBitrateFromVector "$i" "$bitrates")")"
-  done
-  outputToMetaLogNoNewline "$percentages;"
-  
-  # Initialize and output areBitratesSatismodifiery
-  areBitratesSatisfactory=yes
-  for (( i=0; ; ++i )) ; do
-    outerRangeMin=$(extractBitrateFromVector "$i" "$outerRangeMins")
-    bitrate=$(extractBitrateFromVector "$i" "$bitrates")
-    outerRangeMax=$(extractBitrateFromVector "$i" "$outerRangeMaxs")
-    if [[ "" == "$bitrate" ]] ; then
-      break
-    fi
-    if [[ $(isInRange "$outerRangeMin" "$bitrate" "$outerRangeMax") != "$TRUE" ]] ; then
-      areBitratesSatisfactory=no
-      break
-    fi
-  done
-  outputToMetaLogWithNewline "$areBitratesSatisfactory"
-  
-  # Exit if we are finished or if we have iterated too many times
-  if [[ yes == $areBitratesSatisfactory ]] ; then
-    mv "$logPath" "${outputPathBegin}_final.log"
-    exit 0
-  else
-    # Rename the deprecated log
-    countString="$iterationCount"
-    if [[ 1 == `printf -- "$countString" | wc -c | sed -e 's/^ *//'` ]] ; then
-      countString="0$countString"
-    fi
-    mv "$logPath" "${outputPathBegin}_dep${countString}.log"
-    
-    ((++iterationCount))
-    if [[ "$ITERATION_COUNT_LIMIT" == "$iterationCount" ]] ; then
-      outputToMetaLogWithNewline "Could not reach target bitrates"
-      exit 1
-    fi
-  fi
-  
-  filteredMetaLog=$(sed -e 's/;[^;]*$//' < $metaLogPath | sed -e 's/;[^;]*$//')
-  bitratesFromMetaLog=$(printf -- "$filteredMetaLog" | sed -e 's/^[^;]*;//')
-  
-  # Initialize goodIndex
-  goodIndex=-1
-  for (( i=0; i<"$targetBitrateVectorSize"; ++i )); do
-    innerRangeMin=$(extractBitrateFromVector "$i" "$innerRangeMins")
-    bitrate=$(extractBitrateFromVector "$i" "$bitrates")
-    innerRangeMax=$(extractBitrateFromVector "$i" "$innerRangeMaxs")
-    if [[ "$TRUE" == $(isInRange "$innerRangeMin" "$bitrate" "$innerRangeMax") ]] ; then
-      goodIndex="$i"
-    else
-      break
-    fi
-  done
-  
-  badBitrates=$(filterOutGoodBitrates "$goodIndex" "$bitratesFromMetaLog")
-  lambdaModifiersFromMetaLog=`printf -- "$filteredMetaLog" | sed -e 's/;[^;]*$//'`
-  badLambdaModifiers=`printf -- "$lambdaModifiersFromMetaLog" | sed -e "s/^.*-${LAMBDA_MODIFIER_PREFIX}$goodIndex [^ ]* //"`
-  lineCount=`printf -- "$badBitrates\n" | wc -l | sed -e 's/^ *//'`
-  
-  # Initialize guessLambdaModifiersIn
-  guessLambdaModifiersIn="$(outputLine 0 "$badLambdaModifiers");$(outputLine 0 "$badBitrates")"
-  for (( i=1; i<"$lineCount"; ++i )); do
-    guessLambdaModifiersIn="$(printf -- "$guessLambdaModifiersIn\n$(outputLine "$i" "$badLambdaModifiers");$(outputLine "$i" "$badBitrates")")"
-  done
-  
-  # Run guessLambdaModifiers
-  guessedLambdaModifiers=$(printf -- "$guessLambdaModifiersIn" | ${SUB_TOOLS_DIRECTORY}guessLambdaModifiers.exe "-.5" "$(filterOutGoodBitrates "$goodIndex" "$targetBitrates")")
-  if [[ $? != 0 ]] ; then
-    printf "Unexpected exit status from guessLambdaModifiers.exe\n" >&2
-    exit 1
-  fi
-  
-  # Initialize lambdaModifiers and output them to the meta-log
-  lastLambdaModifiersFromMetaLog=`printf -- "$filteredMetaLog" | tail -n 1 | sed -e "s/;[^;]*$//"`
-  goodLambdaModifiersFromMetaLog=`printf -- "$lastLambdaModifiersFromMetaLog" | tail -n 1 | sed -e "s/-${LAMBDA_MODIFIER_PREFIX}$(expr "$goodIndex" + 1).*$//"`
-  lambdaModifiers="${goodLambdaModifiersFromMetaLog}${guessedLambdaModifiers}"
-  outputLambdaModifiersToMetaLog
-  
-done
diff --git a/source/Lib/TLibCommon/Debug.cpp b/source/Lib/TLibCommon/Debug.cpp
index 545339c..ee85c9e 100644
--- a/source/Lib/TLibCommon/Debug.cpp
+++ b/source/Lib/TLibCommon/Debug.cpp
@@ -184,6 +184,9 @@ Void printMacroSettings()
 
   PRINT_CONSTANT(ME_ENABLE_ROUNDING_OF_MVS,                                         settingNameWidth, settingValueWidth);
   PRINT_CONSTANT(PCC_ME_EXT,                                                        settingNameWidth, settingValueWidth);
+    
+  PRINT_CONSTANT(PCC_RDO_EXT,                                                        settingNameWidth, settingValueWidth);
+  PRINT_CONSTANT(PCC_RDO_EXT_SAD,                                                    settingNameWidth, settingValueWidth);
 
   //------------------------------------------------
 
diff --git a/source/Lib/TLibCommon/TComPic.cpp b/source/Lib/TLibCommon/TComPic.cpp
index dd33bd5..4f8906c 100644
--- a/source/Lib/TLibCommon/TComPic.cpp
+++ b/source/Lib/TLibCommon/TComPic.cpp
@@ -68,6 +68,9 @@ TComPic::TComPic()
   m_blockToPatch        = NULL;
   m_occupancyMap        = NULL;
 #endif
+#if PCC_RDO_EXT
+  m_occupancyMapYuv     = NULL;
+#endif
 }
 
 TComPic::~TComPic()
@@ -116,7 +119,12 @@ Void TComPic::create( const TComSPS &sps, const TComPPS &pps, const Bool bIsVirt
 	  m_occupancyMap = new Int[iWidth * iHeight];
   }
 #endif
-
+#if PCC_RDO_EXT
+  {
+    m_occupancyMapYuv = new TComPicYuv;
+    m_occupancyMapYuv->create(iWidth, iHeight, chromaFormatIDC, uiMaxCuWidth, uiMaxCuHeight, uiMaxDepth, true);
+  }
+#endif
   // there are no SEI messages associated with this picture initially
   if (m_SEIs.size() > 0)
   {
@@ -231,7 +239,14 @@ Void TComPic::destroy()
   delete m_occupancyMap;
   m_occupancyMap = NULL;
 #endif
-
+#if PCC_RDO_EXT
+  if (m_occupancyMapYuv)
+  {
+    m_occupancyMapYuv->destroy();
+    delete m_occupancyMapYuv;
+    m_occupancyMapYuv = NULL;
+  }
+#endif
   deleteSEIs(m_SEIs);
 }
 
@@ -397,6 +412,4 @@ Void TComPic::addPictureToHashMapForInter()
 }
 
 //! \}
-
-
 } // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPic.h b/source/Lib/TLibCommon/TComPic.h
index 35f5a51..2d5a3dd 100644
--- a/source/Lib/TLibCommon/TComPic.h
+++ b/source/Lib/TLibCommon/TComPic.h
@@ -74,6 +74,9 @@ private:
 #if PATCH_BASED_MVP || PCC_ME_EXT
   long long*            m_blockToPatch;
   Int*                  m_occupancyMap;
+#endif
+#if PCC_RDO_EXT
+  TComPicYuv*           m_occupancyMapYuv;
 #endif
   Bool                  m_bReconstructed;
   Bool                  m_bNeededForOutput;
@@ -100,6 +103,9 @@ public:
   long long*    getBlockToPatch() const { return m_blockToPatch; }
   Int*          getOccupancyMap() const { return m_occupancyMap; }
 #endif
+#if PCC_RDO_EXT
+  TComPicYuv*   getOccupancyMapYuv() const { return m_occupancyMapYuv; }
+#endif
 
 #if REDUCED_ENCODER_MEMORY
   Void          create( const TComSPS &sps, const TComPPS &pps, const Bool bCreateEncoderSourcePicYuv, const Bool bCreateForImmediateReconstruction );
diff --git a/source/Lib/TLibCommon/TComRdCost.cpp b/source/Lib/TLibCommon/TComRdCost.cpp
index 6d02735..f2bc8dd 100644
--- a/source/Lib/TLibCommon/TComRdCost.cpp
+++ b/source/Lib/TLibCommon/TComRdCost.cpp
@@ -202,6 +202,31 @@ Void TComRdCost::setDistParam( UInt uiBlkWidth, UInt uiBlkHeight, DFunc eDFunc,
   rcDistParam.iRows    = uiBlkHeight;
   rcDistParam.DistFunc = m_afpDistortFunc[eDFunc + g_aucConvertToBit[ rcDistParam.iCols ] + 1 ];
 
+#if PCC_RDO_EXT
+  int iDistFunc        = eDFunc + g_aucConvertToBit[ rcDistParam.iCols ] + 1;
+  if(m_usePCCRDO){
+    switch (iDistFunc){
+      case DF_SSE ... DF_SSE16N:
+        rcDistParam.useRDO = true;
+        break;
+      case DF_SAD ... DF_SADS16N:
+      case DF_SAD12 ... DF_SAD48:
+#if PCC_RDO_EXT_SAD
+        rcDistParam.useRDO = true;
+#else
+        rcDistParam.useRDO = false;
+#endif
+        break;
+      case DF_HADS ... DF_HADS16N:
+      default:
+        rcDistParam.useRDO = false;
+        break;
+    }
+  }else{
+    rcDistParam.useRDO = false;
+  }
+#endif
+  
   // initialize
   rcDistParam.iSubShift  = 0;
   rcDistParam.m_maximumDistortionForEarlyExit = std::numeric_limits<Distortion>::max();
@@ -220,24 +245,60 @@ Void TComRdCost::setDistParam( const TComPattern* const pcPatternKey, const Pel*
   // set Block Width / Height
   rcDistParam.iCols    = pcPatternKey->getROIYWidth();
   rcDistParam.iRows    = pcPatternKey->getROIYHeight();
-  rcDistParam.DistFunc = m_afpDistortFunc[DF_SAD + g_aucConvertToBit[ rcDistParam.iCols ] + 1 ];
+#if PCC_RDO_EXT
+  int iDistFunc        = DF_SAD + g_aucConvertToBit[ rcDistParam.iCols ] + 1 ;
+#endif
+  rcDistParam.DistFunc = m_afpDistortFunc[DF_SAD + g_aucConvertToBit[ rcDistParam.iCols ] + 1];
   rcDistParam.m_maximumDistortionForEarlyExit = std::numeric_limits<Distortion>::max();
 
   if (rcDistParam.iCols == 12)
   {
+#if PCC_RDO_EXT
+    iDistFunc = DF_SAD12;
+#endif
     rcDistParam.DistFunc = m_afpDistortFunc[DF_SAD12];
   }
   else if (rcDistParam.iCols == 24)
   {
+#if PCC_RDO_EXT
+    iDistFunc = DF_SAD24;
+#endif
     rcDistParam.DistFunc = m_afpDistortFunc[DF_SAD24];
   }
   else if (rcDistParam.iCols == 48)
   {
+#if PCC_RDO_EXT
+    iDistFunc = DF_SAD48;
+#endif
     rcDistParam.DistFunc = m_afpDistortFunc[DF_SAD48];
   }
 
   // initialize
   rcDistParam.iSubShift  = 0;
+  
+#if PCC_RDO_EXT
+  if(m_usePCCRDO){
+    switch (iDistFunc){
+      case DF_SSE ... DF_SSE16N:
+        rcDistParam.useRDO = true;
+        break;
+      case DF_SAD ... DF_SADS16N:
+      case DF_SAD12 ... DF_SAD48:
+#if PCC_RDO_EXT_SAD
+        rcDistParam.useRDO = true;
+#else
+        rcDistParam.useRDO = false;
+#endif
+        break;
+      case DF_HADS ... DF_HADS16N:
+      default:
+        rcDistParam.useRDO = false;
+        break;
+    }
+  }else{
+    rcDistParam.useRDO = false;
+  }
+#endif
 }
 
 // Setting the Distortion Parameter for Inter (subpel ME with step)
@@ -258,34 +319,77 @@ Void TComRdCost::setDistParam( const TComPattern* const pcPatternKey, const Pel*
   rcDistParam.iRows    = pcPatternKey->getROIYHeight();
 
   rcDistParam.m_maximumDistortionForEarlyExit = std::numeric_limits<Distortion>::max();
-
+#if PCC_RDO_EXT
+  int iDistFct;
+#endif
   // set distortion function
   if ( !bHADME )
   {
     rcDistParam.DistFunc = m_afpDistortFunc[DF_SADS + g_aucConvertToBit[ rcDistParam.iCols ] + 1 ];
+#if PCC_RDO_EXT
+    iDistFct = DF_SADS + g_aucConvertToBit[ rcDistParam.iCols ] + 1;
+#endif
     if (rcDistParam.iCols == 12)
     {
       rcDistParam.DistFunc = m_afpDistortFunc[DF_SADS12];
+#if PCC_RDO_EXT
+      iDistFct=DF_SADS12;
+#endif
     }
     else if (rcDistParam.iCols == 24)
     {
       rcDistParam.DistFunc = m_afpDistortFunc[DF_SADS24];
+#if PCC_RDO_EXT
+      iDistFct=DF_SADS24;
+#endif
     }
     else if (rcDistParam.iCols == 48)
     {
       rcDistParam.DistFunc = m_afpDistortFunc[DF_SADS48];
+#if PCC_RDO_EXT
+      iDistFct=DF_SADS48;
+#endif
     }
   }
   else
   {
     rcDistParam.DistFunc = m_afpDistortFunc[DF_HADS + g_aucConvertToBit[ rcDistParam.iCols ] + 1 ];
+    iDistFct=DF_HADS + g_aucConvertToBit[ rcDistParam.iCols ] + 1 ;
   }
 
   // initialize
   rcDistParam.iSubShift  = 0;
+    
+#if PCC_RDO_EXT
+  if(m_usePCCRDO){
+    switch (iDistFct){
+      case DF_SSE ... DF_SSE16N:
+        rcDistParam.useRDO = true;
+        break;
+      case DF_SAD ... DF_SADS16N:
+      case DF_SAD12 ... DF_SAD48:
+#if PCC_RDO_EXT_SAD
+        rcDistParam.useRDO = true;
+#else
+        rcDistParam.useRDO = false;
+#endif
+        break;
+      case DF_HADS ... DF_HADS16N:
+      default:
+        rcDistParam.useRDO = false;
+        break;
+    }
+  }else{
+    rcDistParam.useRDO = false;
+  }
+#endif
 }
 
-Void TComRdCost::setDistParam( DistParam& rcDP, Int bitDepth, const Pel* p1, Int iStride1, const Pel* p2, Int iStride2, Int iWidth, Int iHeight, Bool bHadamard )
+Void TComRdCost::setDistParam( DistParam& rcDP, Int bitDepth, const Pel* p1, Int iStride1, const Pel* p2, Int iStride2, Int iWidth, Int iHeight, Bool bHadamard
+#if PCC_RDO_EXT
+    ,const Pel* pOcc, Int iStrideOcc
+#endif
+)
 {
   rcDP.pOrg         = p1;
   rcDP.pCur         = p2;
@@ -298,6 +402,33 @@ Void TComRdCost::setDistParam( DistParam& rcDP, Int bitDepth, const Pel* p1, Int
   rcDP.bitDepth     = bitDepth;
   rcDP.DistFunc     = m_afpDistortFunc[ ( bHadamard ? DF_HADS : DF_SADS ) + g_aucConvertToBit[ iWidth ] + 1 ];
   rcDP.m_maximumDistortionForEarlyExit = std::numeric_limits<Distortion>::max();
+  
+#if PCC_RDO_EXT
+  int iDistFct = ( bHadamard ? DF_HADS : DF_SADS ) + g_aucConvertToBit[ iWidth ] + 1;
+  rcDP.pOccupancy   = pOcc;
+  rcDP.iStrideOccupancy = iStrideOcc;
+  if(m_usePCCRDO){
+    switch (iDistFct){
+      case DF_SSE ... DF_SSE16N:
+        rcDP.useRDO = true;
+        break;
+      case DF_SAD ... DF_SADS16N:
+      case DF_SAD12 ... DF_SAD48:
+#if PCC_RDO_EXT_SAD
+        rcDP.useRDO = true;
+#else
+        rcDP.useRDO = false;
+#endif
+        break;
+      case DF_HADS ... DF_HADS16N:
+      default:
+        rcDP.useRDO = false;
+        break;
+    }
+  }else{
+    rcDP.useRDO = false;
+  }
+#endif
 }
 
 Distortion TComRdCost::calcHAD( Int bitDepth, const Pel* pi0, Int iStride0, const Pel* pi1, Int iStride1, Int iWidth, Int iHeight )
@@ -338,8 +469,11 @@ Distortion TComRdCost::calcHAD( Int bitDepth, const Pel* pi0, Int iStride0, cons
 
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(bitDepth-8) );
 }
-
+#if PCC_RDO_EXT
+Distortion TComRdCost::getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc, const Pel* piOccupancy, Int iOccupancyStride)
+#else
 Distortion TComRdCost::getDistPart( Int bitDepth, const Pel* piCur, Int iCurStride,  const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc )
+#endif
 {
   DistParam cDtParam;
   setDistParam( uiBlkWidth, uiBlkHeight, eDFunc, cDtParam );
@@ -347,6 +481,17 @@ Distortion TComRdCost::getDistPart( Int bitDepth, const Pel* piCur, Int iCurStri
   cDtParam.pCur       = piCur;
   cDtParam.iStrideOrg = iOrgStride;
   cDtParam.iStrideCur = iCurStride;
+
+#if PCC_RDO_EXT
+  if (cDtParam.useRDO){
+    cDtParam.pOccupancy = piOccupancy;
+    cDtParam.iStrideOccupancy = iOccupancyStride;
+  }else{
+    cDtParam.iStrideOccupancy = 0;
+    cDtParam.pOccupancy = NULL;
+  }
+#endif
+  
   cDtParam.iStep      = 1;
 
   cDtParam.bApplyWeight = false;
@@ -375,17 +520,30 @@ Void TComRdCost::adjustLambdaForColourTrans(Int delta_QP, const BitDepths &bitDe
 // ====================================================================================================================
 
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
-inline Int simdSADLine4n16b( const Pel * piOrg , const Pel * piCur , Int nWidth )
+inline Int simdSADLine4n16b( const Pel * piOrg , const Pel * piCur , Int nWidth
+#if PCC_RDO_EXT
+                            ,const Pel* piOcc = NULL, const bool useRDO = false
+#endif
+                            )
 {
   // internal bit-depth must be 12-bit or lower
   assert( !( nWidth & 0x03 ) );
   __m128i org , cur , abs , sum;
+#if PCC_RDO_EXT
+  __m128i occ;
+#endif
   sum = _mm_setzero_si128();
   for( Int n = 0 ; n < nWidth ; n += 4 )
   {
     org = _mm_loadl_epi64( ( __m128i* )( piOrg + n ) );
     cur = _mm_loadl_epi64( ( __m128i* )( piCur + n ) );
     abs = _mm_subs_epi16( _mm_max_epi16( org , cur )  , _mm_min_epi16( org , cur ) );
+#if PCC_RDO_EXT
+    if (useRDO){
+      occ = _mm_loadl_epi64( (__m128i* )( piOcc + n ) );
+      abs = _mm_and_si128(abs, occ);
+    }
+#endif
     sum = _mm_adds_epu16( abs , sum );
   }
   __m128i zero =  _mm_setzero_si128();
@@ -395,17 +553,30 @@ inline Int simdSADLine4n16b( const Pel * piOrg , const Pel * piCur , Int nWidth
   return( _mm_cvtsi128_si32( sum ) );
 }
 
-inline Int simdSADLine8n16b( const Pel * piOrg , const Pel * piCur , Int nWidth )
+inline Int simdSADLine8n16b( const Pel * piOrg , const Pel * piCur , Int nWidth
+#if PCC_RDO_EXT
+                            ,const Pel* piOcc = NULL, const bool useRDO = false
+#endif
+                            )
 {
   // internal bit-depth must be 12-bit or lower
   assert( !( nWidth & 0x07 ) );
   __m128i org , cur , abs , sum;
+#if PCC_RDO_EXT
+  __m128i occ;
+#endif
   sum = _mm_setzero_si128();
   for( Int n = 0 ; n < nWidth ; n += 8 )
   {
     org = _mm_loadu_si128( ( __m128i* )( piOrg + n ) );
     cur = _mm_loadu_si128( ( __m128i* )( piCur + n ) );
     abs = _mm_subs_epi16( _mm_max_epi16( org , cur )  , _mm_min_epi16( org , cur ) );
+#if PCC_RDO_EXT
+    if (useRDO){
+      occ = _mm_loadu_si128( (__m128i* )( piOcc + n ) );
+      abs = _mm_and_si128(abs, occ);
+    }
+#endif
     sum = _mm_adds_epu16( abs , sum );
   }
   __m128i zero =  _mm_setzero_si128();
@@ -490,6 +661,7 @@ UInt simdHADs8x8( const Pel * piOrg, const Pel * piCur, Int iStrideOrg, Int iStr
   for( Int n = 0 ; n < 8 ; n++ , piOrg += iStrideOrg , piCur += iStrideCur )
   {
     __m128i diff = _mm_sub_epi16( _mm_loadu_si128( ( __m128i* )piOrg ) , _mm_loadu_si128( ( __m128i* )piCur ) );
+    
     // sign extension
     __m128i mask = _mm_cmplt_epi16( diff , mmZero );
     mmDiff[n][0] = _mm_unpacklo_epi16( diff , mask );
@@ -540,51 +712,108 @@ Distortion TComRdCost::xGetSAD( DistParam* pcDtParam )
   const Int  iStrideCur      = pcDtParam->iStrideCur;
   const Int  iStrideOrg      = pcDtParam->iStrideOrg;
   const UInt distortionShift = DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth - 8);
-
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+  Intermediate_Int  tmp;
+#endif
   Distortion uiSum = 0;
 
+  
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
-  if( pcDtParam->bitDepth <= 10 )
-  {
-    if( ( iCols & 0x07 ) == 0 )
+    if( pcDtParam->bitDepth <= 10 )
     {
-      for( Int iRows   = pcDtParam->iRows ; iRows != 0; iRows-- )
+      if( ( iCols & 0x07 ) == 0 )
       {
-        uiSum += simdSADLine8n16b( piOrg , piCur , iCols );
-        piOrg += iStrideOrg;
-        piCur += iStrideCur;
+        for( Int iRows   = pcDtParam->iRows ; iRows != 0; iRows-- )
+        {
+      uiSum += simdSADLine8n16b(piOrg, piCur, iCols, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+        }
+      }
+      else
+      {
+        for( Int  iRows   = pcDtParam->iRows; iRows != 0; iRows-- )
+        {
+      uiSum += simdSADLine4n16b(piOccupancy, piCur, iCols, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+        }
       }
     }
     else
     {
-      for( Int  iRows   = pcDtParam->iRows; iRows != 0; iRows-- )
+#endif //Vector_Coding_Distortion
+      for(Int iRows = pcDtParam->iRows ; iRows != 0; iRows-- )
       {
-        uiSum += simdSADLine4n16b( piOrg , piCur , iCols );
+        for (Int n = 0; n < iCols; n++ )
+        {
+          tmp = abs( piOrg[n] - piCur[n] ) * ((piOccupancy[n] != 0) ? 1 : 0);
+          uiSum += tmp;
+        }
+        if (pcDtParam->m_maximumDistortionForEarlyExit < ( uiSum >> distortionShift ))
+        {
+          return ( uiSum >> distortionShift );
+        }
         piOrg += iStrideOrg;
         piCur += iStrideCur;
+        piOccupancy += iStrideOccupancy;
       }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
     }
-  }
-  else
-  {
 #endif
-  for(Int iRows = pcDtParam->iRows ; iRows != 0; iRows-- )
-  {
-    for (Int n = 0; n < iCols; n++ )
+  }else{
+#endif //PCC_RDO_EXT
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
     {
-      uiSum += abs( piOrg[n] - piCur[n] );
+      if( ( iCols & 0x07 ) == 0 )
+      {
+        for( Int iRows   = pcDtParam->iRows ; iRows != 0; iRows-- )
+        {
+          uiSum += simdSADLine8n16b( piOrg , piCur , iCols);
+          piOrg += iStrideOrg;
+          piCur += iStrideCur;
+        }
+      }
+      else
+      {
+        for( Int  iRows   = pcDtParam->iRows; iRows != 0; iRows-- )
+        {
+          uiSum += simdSADLine4n16b( piOrg , piCur , iCols);
+          piOrg += iStrideOrg;
+          piCur += iStrideCur;
+        }
+      }
     }
-    if (pcDtParam->m_maximumDistortionForEarlyExit < ( uiSum >> distortionShift ))
+    else
     {
-      return ( uiSum >> distortionShift );
-    }
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
-  }
+#endif
+      for(Int iRows = pcDtParam->iRows ; iRows != 0; iRows-- )
+      {
+        for (Int n = 0; n < iCols; n++ )
+        {
+          uiSum += abs( piOrg[n] - piCur[n] );
+        }
+        if (pcDtParam->m_maximumDistortionForEarlyExit < ( uiSum >> distortionShift ))
+        {
+          return ( uiSum >> distortionShift );
+        }
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+    
+#if PCC_RDO_EXT
   }
 #endif
-
   return ( uiSum >> distortionShift );
 }
 
@@ -601,37 +830,78 @@ Distortion TComRdCost::xGetSAD4( DistParam* pcDtParam )
   Int  iSubStep   = ( 1 << iSubShift );
   Int  iStrideCur = pcDtParam->iStrideCur*iSubStep;
   Int  iStrideOrg = pcDtParam->iStrideOrg*iSubStep;
-
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+#endif
   Distortion uiSum = 0;
 
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
-  if( pcDtParam->bitDepth <= 10 )
-  {
-    for( ; iRows != 0; iRows-=iSubStep )
+    if( pcDtParam->bitDepth <= 10 )
     {
-      uiSum += simdSADLine4n16b( piOrg , piCur , 4 );
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+      uiSum += simdSADLine4n16b(piOccupancy, piCur, 4, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif //VECTOR_CODING_DISTORTION
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        tmp = abs( piOrg[0] - piCur[0] ) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[1] - piCur[1] ) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[2] - piCur[2] ) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[3] - piCur[3] ) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += tmp;
+        
+        piOccupancy += iStrideOccupancy;
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
     }
-  }
-  else
-  {
 #endif
-  for( ; iRows != 0; iRows-=iSubStep )
-  {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
+    uiSum <<= iSubShift;
+  }else{
+#endif //PCC_RDO_EXT
+    
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine4n16b( piOrg , piCur , 4);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
 
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
-  }
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+    
+    uiSum <<= iSubShift;
+#if PCC_RDO_EXT
   }
 #endif
-
-  uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
 
@@ -648,41 +918,84 @@ Distortion TComRdCost::xGetSAD8( DistParam* pcDtParam )
   Int  iSubStep   = ( 1 << iSubShift );
   Int  iStrideCur = pcDtParam->iStrideCur*iSubStep;
   Int  iStrideOrg = pcDtParam->iStrideOrg*iSubStep;
-
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+#endif
   Distortion uiSum = 0;
 
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
-  if( pcDtParam->bitDepth <= 10 )
-  {
-    for( ; iRows != 0; iRows-=iSubStep )
+    if( pcDtParam->bitDepth <= 10 )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , 8 );
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+      uiSum += simdSADLine8n16b(piOrg, piCur, 8, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
+      }
     }
-  }
-  else
-  {
+    else
+    {
 #endif
-  for( ; iRows != 0; iRows-=iSubStep )
-  {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        tmp = abs( piOrg[0] - piCur[0] ) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[1] - piCur[1] ) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[2] - piCur[2] ) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[3] - piCur[3] ) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[4] - piCur[4] ) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[5] - piCur[5] ) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[6] - piCur[6] ) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[7] - piCur[7] ) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += tmp;
+        
+        piOccupancy += iStrideOccupancy;
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+    
+    uiSum <<= iSubShift;
+  }else{
+#endif
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , 8);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }else{
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
+        uiSum += abs( piOrg[4] - piCur[4] );
+        uiSum += abs( piOrg[5] - piCur[5] );
+        uiSum += abs( piOrg[6] - piCur[6] );
+        uiSum += abs( piOrg[7] - piCur[7] );
 
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
-  }
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+    
+    uiSum <<= iSubShift;
+#if PCC_RDO_EXT
   }
 #endif
-
-  uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
 
@@ -699,49 +1012,104 @@ Distortion TComRdCost::xGetSAD16( DistParam* pcDtParam )
   Int  iSubStep   = ( 1 << iSubShift );
   Int  iStrideCur = pcDtParam->iStrideCur*iSubStep;
   Int  iStrideOrg = pcDtParam->iStrideOrg*iSubStep;
-
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+#endif
   Distortion uiSum = 0;
 
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
-  if( pcDtParam->bitDepth <= 10 )
-  {
-    for( ; iRows != 0; iRows-=iSubStep )
+    if( pcDtParam->bitDepth <= 10 )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , 16 );
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+      uiSum += simdSADLine8n16b(piOrg, piCur, 16, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
+      }
     }
-  }
-  else
-  {
+    else
+    {
 #endif
-  for( ; iRows != 0; iRows-=iSubStep )
-  {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
-    uiSum += abs( piOrg[8] - piCur[8] );
-    uiSum += abs( piOrg[9] - piCur[9] );
-    uiSum += abs( piOrg[10] - piCur[10] );
-    uiSum += abs( piOrg[11] - piCur[11] );
-    uiSum += abs( piOrg[12] - piCur[12] );
-    uiSum += abs( piOrg[13] - piCur[13] );
-    uiSum += abs( piOrg[14] - piCur[14] );
-    uiSum += abs( piOrg[15] - piCur[15] );
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        tmp = abs( piOrg[0] - piCur[0] ) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[1] - piCur[1] ) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[2] - piCur[2] ) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[3] - piCur[3] ) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[4] - piCur[4] ) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[5] - piCur[5] ) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[6] - piCur[6] ) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[7] - piCur[7] ) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[8] - piCur[8] ) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[9] - piCur[9] ) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[10] - piCur[10] ) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[11] - piCur[11] ) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[12] - piCur[12] ) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[13] - piCur[13] ) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[14] - piCur[14] ) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += tmp;
+        tmp = abs( piOrg[15] - piCur[15] ) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += tmp;
+        
+        piOccupancy += iStrideOccupancy;
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+    
+    uiSum <<= iSubShift;
 
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
-  }
+  }else{
+#endif
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
-  }
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , 16);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
 #endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
+        uiSum += abs( piOrg[4] - piCur[4] );
+        uiSum += abs( piOrg[5] - piCur[5] );
+        uiSum += abs( piOrg[6] - piCur[6] );
+        uiSum += abs( piOrg[7] - piCur[7] );
+        uiSum += abs( piOrg[8] - piCur[8] );
+        uiSum += abs( piOrg[9] - piCur[9] );
+        uiSum += abs( piOrg[10] - piCur[10] );
+        uiSum += abs( piOrg[11] - piCur[11] );
+        uiSum += abs( piOrg[12] - piCur[12] );
+        uiSum += abs( piOrg[13] - piCur[13] );
+        uiSum += abs( piOrg[14] - piCur[14] );
+        uiSum += abs( piOrg[15] - piCur[15] );
 
-  uiSum <<= iSubShift;
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+    
+    uiSum <<= iSubShift;
+    
+#if PCC_RDO_EXT
+  }
+#endif
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
 
@@ -758,26 +1126,52 @@ Distortion TComRdCost::xGetSAD12( DistParam* pcDtParam )
   Int  iSubStep   = ( 1 << iSubShift );
   Int  iStrideCur = pcDtParam->iStrideCur*iSubStep;
   Int  iStrideOrg = pcDtParam->iStrideOrg*iSubStep;
-
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+#endif
   Distortion uiSum = 0;
 
   for( ; iRows != 0; iRows-=iSubStep )
   {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
-    uiSum += abs( piOrg[8] - piCur[8] );
-    uiSum += abs( piOrg[9] - piCur[9] );
-    uiSum += abs( piOrg[10] - piCur[10] );
-    uiSum += abs( piOrg[11] - piCur[11] );
-
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
+#if PCC_RDO_EXT
+    if (pcDtParam->useRDO){
+      tmp = abs( piOrg[0] - piCur[0] ) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[1] - piCur[1] ) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[2] - piCur[2] ) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[3] - piCur[3] ) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[4] - piCur[4] ) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[5] - piCur[5] ) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[6] - piCur[6] ) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[7] - piCur[7] ) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[8] - piCur[8] ) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[9] - piCur[9] ) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[10] - piCur[10] ) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[11] - piCur[11] ) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += tmp;
+      tmp = abs( piOrg[12] - piCur[12] ) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += tmp;
+
+      piOccupancy += iStrideOccupancy;
+    }else{
+#endif
+      uiSum += abs( piOrg[0] - piCur[0] );
+      uiSum += abs( piOrg[1] - piCur[1] );
+      uiSum += abs( piOrg[2] - piCur[2] );
+      uiSum += abs( piOrg[3] - piCur[3] );
+      uiSum += abs( piOrg[4] - piCur[4] );
+      uiSum += abs( piOrg[5] - piCur[5] );
+      uiSum += abs( piOrg[6] - piCur[6] );
+      uiSum += abs( piOrg[7] - piCur[7] );
+      uiSum += abs( piOrg[8] - piCur[8] );
+      uiSum += abs( piOrg[9] - piCur[9] );
+      uiSum += abs( piOrg[10] - piCur[10] );
+      uiSum += abs( piOrg[11] - piCur[11] );
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+#if PCC_RDO_EXT
+    }
+#endif
   }
 
   uiSum <<= iSubShift;
@@ -796,13 +1190,18 @@ Distortion TComRdCost::xGetSAD16N( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg*iSubStep;
 
   Distortion uiSum = 0;
-
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   if( pcDtParam->bitDepth <= 10 )
   {
     for( ; iRows != 0; iRows-=iSubStep )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , iCols );
+      uiSum += simdSADLine8n16b(piOrg, piCur, iCols, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
     }
@@ -814,30 +1213,75 @@ Distortion TComRdCost::xGetSAD16N( DistParam* pcDtParam )
   {
     for (Int n = 0; n < iCols; n+=16 )
     {
-      uiSum += abs( piOrg[n+ 0] - piCur[n+ 0] );
-      uiSum += abs( piOrg[n+ 1] - piCur[n+ 1] );
-      uiSum += abs( piOrg[n+ 2] - piCur[n+ 2] );
-      uiSum += abs( piOrg[n+ 3] - piCur[n+ 3] );
-      uiSum += abs( piOrg[n+ 4] - piCur[n+ 4] );
-      uiSum += abs( piOrg[n+ 5] - piCur[n+ 5] );
-      uiSum += abs( piOrg[n+ 6] - piCur[n+ 6] );
-      uiSum += abs( piOrg[n+ 7] - piCur[n+ 7] );
-      uiSum += abs( piOrg[n+ 8] - piCur[n+ 8] );
-      uiSum += abs( piOrg[n+ 9] - piCur[n+ 9] );
-      uiSum += abs( piOrg[n+10] - piCur[n+10] );
-      uiSum += abs( piOrg[n+11] - piCur[n+11] );
-      uiSum += abs( piOrg[n+12] - piCur[n+12] );
-      uiSum += abs( piOrg[n+13] - piCur[n+13] );
-      uiSum += abs( piOrg[n+14] - piCur[n+14] );
-      uiSum += abs( piOrg[n+15] - piCur[n+15] );
+    tmp = abs( piOrg[n+ 0] - piCur[n+ 0] ) * ((piOccupancy[n+ 0] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 1] - piCur[n+ 1] ) * ((piOccupancy[n+ 1] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 2] - piCur[n+ 2] ) * ((piOccupancy[n+ 2] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 3] - piCur[n+ 3] ) * ((piOccupancy[n+ 3] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 4] - piCur[n+ 4] ) * ((piOccupancy[n+ 4] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 5] - piCur[n+ 5] ) * ((piOccupancy[n+ 5] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 6] - piCur[n+ 6] ) * ((piOccupancy[n+ 6] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 7] - piCur[n+ 7] ) * ((piOccupancy[n+ 7] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 8] - piCur[n+ 8] ) * ((piOccupancy[n+ 8] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+ 9] - piCur[n+ 9] ) * ((piOccupancy[n+ 9] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+10] - piCur[n+10] ) * ((piOccupancy[n+10] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+11] - piCur[n+11] ) * ((piOccupancy[n+11] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+12] - piCur[n+12] ) * ((piOccupancy[n+12] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+13] - piCur[n+13] ) * ((piOccupancy[n+13] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+14] - piCur[n+14] ) * ((piOccupancy[n+14] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[n+15] - piCur[n+15] ) * ((piOccupancy[n+15] != 0) ? 1 : 0); uiSum += tmp;
     }
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+    piOccupancy += iStrideOccupancy;
   }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   }
 #endif
-
+  }else{
+#endif
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , iCols);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        for (Int n = 0; n < iCols; n+=16 )
+        {
+          uiSum += abs( piOrg[n+ 0] - piCur[n+ 0] );
+          uiSum += abs( piOrg[n+ 1] - piCur[n+ 1] );
+          uiSum += abs( piOrg[n+ 2] - piCur[n+ 2] );
+          uiSum += abs( piOrg[n+ 3] - piCur[n+ 3] );
+          uiSum += abs( piOrg[n+ 4] - piCur[n+ 4] );
+          uiSum += abs( piOrg[n+ 5] - piCur[n+ 5] );
+          uiSum += abs( piOrg[n+ 6] - piCur[n+ 6] );
+          uiSum += abs( piOrg[n+ 7] - piCur[n+ 7] );
+          uiSum += abs( piOrg[n+ 8] - piCur[n+ 8] );
+          uiSum += abs( piOrg[n+ 9] - piCur[n+ 9] );
+          uiSum += abs( piOrg[n+10] - piCur[n+10] );
+          uiSum += abs( piOrg[n+11] - piCur[n+11] );
+          uiSum += abs( piOrg[n+12] - piCur[n+12] );
+          uiSum += abs( piOrg[n+13] - piCur[n+13] );
+          uiSum += abs( piOrg[n+14] - piCur[n+14] );
+          uiSum += abs( piOrg[n+15] - piCur[n+15] );
+        }
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+#if PCC_RDO_EXT
+  }
+#endif
   uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
@@ -858,12 +1302,18 @@ Distortion TComRdCost::xGetSAD32( DistParam* pcDtParam )
 
   Distortion uiSum = 0;
 
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
+    const Pel* piOccupancy = pcDtParam->pOccupancy;
+    Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+    Intermediate_Int  tmp;
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   if( pcDtParam->bitDepth <= 10 )
   {
     for( ; iRows != 0; iRows-=iSubStep )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , 32 );
+      uiSum += simdSADLine8n16b(piOrg, piCur, 32, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
     }
@@ -873,46 +1323,104 @@ Distortion TComRdCost::xGetSAD32( DistParam* pcDtParam )
 #endif
   for( ; iRows != 0; iRows-=iSubStep )
   {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
-    uiSum += abs( piOrg[8] - piCur[8] );
-    uiSum += abs( piOrg[9] - piCur[9] );
-    uiSum += abs( piOrg[10] - piCur[10] );
-    uiSum += abs( piOrg[11] - piCur[11] );
-    uiSum += abs( piOrg[12] - piCur[12] );
-    uiSum += abs( piOrg[13] - piCur[13] );
-    uiSum += abs( piOrg[14] - piCur[14] );
-    uiSum += abs( piOrg[15] - piCur[15] );
-    uiSum += abs( piOrg[16] - piCur[16] );
-    uiSum += abs( piOrg[17] - piCur[17] );
-    uiSum += abs( piOrg[18] - piCur[18] );
-    uiSum += abs( piOrg[19] - piCur[19] );
-    uiSum += abs( piOrg[20] - piCur[20] );
-    uiSum += abs( piOrg[21] - piCur[21] );
-    uiSum += abs( piOrg[22] - piCur[22] );
-    uiSum += abs( piOrg[23] - piCur[23] );
-    uiSum += abs( piOrg[24] - piCur[24] );
-    uiSum += abs( piOrg[25] - piCur[25] );
-    uiSum += abs( piOrg[26] - piCur[26] );
-    uiSum += abs( piOrg[27] - piCur[27] );
-    uiSum += abs( piOrg[28] - piCur[28] );
-    uiSum += abs( piOrg[29] - piCur[29] );
-    uiSum += abs( piOrg[30] - piCur[30] );
-    uiSum += abs( piOrg[31] - piCur[31] );
-
+    tmp = abs( piOrg[ 0] - piCur[ 0] ) * ((piOccupancy[ 0] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 1] - piCur[ 1] ) * ((piOccupancy[ 1] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 2] - piCur[ 2] ) * ((piOccupancy[ 2] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 3] - piCur[ 3] ) * ((piOccupancy[ 3] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 4] - piCur[ 4] ) * ((piOccupancy[ 4] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 5] - piCur[ 5] ) * ((piOccupancy[ 5] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 6] - piCur[ 6] ) * ((piOccupancy[ 6] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 7] - piCur[ 7] ) * ((piOccupancy[ 7] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 8] - piCur[ 8] ) * ((piOccupancy[ 8] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 9] - piCur[ 9] ) * ((piOccupancy[ 9] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[10] - piCur[10] ) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[11] - piCur[11] ) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[12] - piCur[12] ) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[13] - piCur[13] ) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[14] - piCur[14] ) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[15] - piCur[15] ) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[16] - piCur[16] ) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[17] - piCur[17] ) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[18] - piCur[18] ) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[19] - piCur[19] ) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[20] - piCur[20] ) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[21] - piCur[21] ) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[22] - piCur[22] ) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[23] - piCur[23] ) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[24] - piCur[24] ) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[25] - piCur[25] ) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[26] - piCur[26] ) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[27] - piCur[27] ) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[28] - piCur[28] ) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[29] - piCur[29] ) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[30] - piCur[30] ) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[31] - piCur[31] ) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += tmp;
+    
+    piOccupancy += iStrideOccupancy;
     piOrg += iStrideOrg;
     piCur += iStrideCur;
   }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   }
 #endif
-
+  }else{
+#endif
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , 32);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
+        uiSum += abs( piOrg[4] - piCur[4] );
+        uiSum += abs( piOrg[5] - piCur[5] );
+        uiSum += abs( piOrg[6] - piCur[6] );
+        uiSum += abs( piOrg[7] - piCur[7] );
+        uiSum += abs( piOrg[8] - piCur[8] );
+        uiSum += abs( piOrg[9] - piCur[9] );
+        uiSum += abs( piOrg[10] - piCur[10] );
+        uiSum += abs( piOrg[11] - piCur[11] );
+        uiSum += abs( piOrg[12] - piCur[12] );
+        uiSum += abs( piOrg[13] - piCur[13] );
+        uiSum += abs( piOrg[14] - piCur[14] );
+        uiSum += abs( piOrg[15] - piCur[15] );
+        uiSum += abs( piOrg[16] - piCur[16] );
+        uiSum += abs( piOrg[17] - piCur[17] );
+        uiSum += abs( piOrg[18] - piCur[18] );
+        uiSum += abs( piOrg[19] - piCur[19] );
+        uiSum += abs( piOrg[20] - piCur[20] );
+        uiSum += abs( piOrg[21] - piCur[21] );
+        uiSum += abs( piOrg[22] - piCur[22] );
+        uiSum += abs( piOrg[23] - piCur[23] );
+        uiSum += abs( piOrg[24] - piCur[24] );
+        uiSum += abs( piOrg[25] - piCur[25] );
+        uiSum += abs( piOrg[26] - piCur[26] );
+        uiSum += abs( piOrg[27] - piCur[27] );
+        uiSum += abs( piOrg[28] - piCur[28] );
+        uiSum += abs( piOrg[29] - piCur[29] );
+        uiSum += abs( piOrg[30] - piCur[30] );
+        uiSum += abs( piOrg[31] - piCur[31] );
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+#if PCC_RDO_EXT
+  }
+#endif
   uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
@@ -933,12 +1441,18 @@ Distortion TComRdCost::xGetSAD24( DistParam* pcDtParam )
 
   Distortion uiSum = 0;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   if( pcDtParam->bitDepth <= 10 )
   {
     for( ; iRows != 0; iRows-=iSubStep )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , 24 );
+      uiSum += simdSADLine8n16b(piOrg, piCur, 24, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
     }
@@ -948,38 +1462,88 @@ Distortion TComRdCost::xGetSAD24( DistParam* pcDtParam )
 #endif
   for( ; iRows != 0; iRows-=iSubStep )
   {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
-    uiSum += abs( piOrg[8] - piCur[8] );
-    uiSum += abs( piOrg[9] - piCur[9] );
-    uiSum += abs( piOrg[10] - piCur[10] );
-    uiSum += abs( piOrg[11] - piCur[11] );
-    uiSum += abs( piOrg[12] - piCur[12] );
-    uiSum += abs( piOrg[13] - piCur[13] );
-    uiSum += abs( piOrg[14] - piCur[14] );
-    uiSum += abs( piOrg[15] - piCur[15] );
-    uiSum += abs( piOrg[16] - piCur[16] );
-    uiSum += abs( piOrg[17] - piCur[17] );
-    uiSum += abs( piOrg[18] - piCur[18] );
-    uiSum += abs( piOrg[19] - piCur[19] );
-    uiSum += abs( piOrg[20] - piCur[20] );
-    uiSum += abs( piOrg[21] - piCur[21] );
-    uiSum += abs( piOrg[22] - piCur[22] );
-    uiSum += abs( piOrg[23] - piCur[23] );
-
+    tmp = abs( piOrg[ 0] - piCur[ 0] ) * ((piOccupancy[ 0] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 1] - piCur[ 1] ) * ((piOccupancy[ 1] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 2] - piCur[ 2] ) * ((piOccupancy[ 2] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 3] - piCur[ 3] ) * ((piOccupancy[ 3] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 4] - piCur[ 4] ) * ((piOccupancy[ 4] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 5] - piCur[ 5] ) * ((piOccupancy[ 5] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 6] - piCur[ 6] ) * ((piOccupancy[ 6] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 7] - piCur[ 7] ) * ((piOccupancy[ 7] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 8] - piCur[ 8] ) * ((piOccupancy[ 8] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 9] - piCur[ 9] ) * ((piOccupancy[ 9] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[10] - piCur[10] ) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[11] - piCur[11] ) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[12] - piCur[12] ) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[13] - piCur[13] ) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[14] - piCur[14] ) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[15] - piCur[15] ) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[16] - piCur[16] ) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[17] - piCur[17] ) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[18] - piCur[18] ) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[19] - piCur[19] ) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[20] - piCur[20] ) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[21] - piCur[21] ) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[22] - piCur[22] ) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[23] - piCur[23] ) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += tmp;
+    
+    piOccupancy += iStrideOccupancy;
     piOrg += iStrideOrg;
     piCur += iStrideCur;
   }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   }
 #endif
-
+  }else{
+#endif
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , 24);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
+        uiSum += abs( piOrg[4] - piCur[4] );
+        uiSum += abs( piOrg[5] - piCur[5] );
+        uiSum += abs( piOrg[6] - piCur[6] );
+        uiSum += abs( piOrg[7] - piCur[7] );
+        uiSum += abs( piOrg[8] - piCur[8] );
+        uiSum += abs( piOrg[9] - piCur[9] );
+        uiSum += abs( piOrg[10] - piCur[10] );
+        uiSum += abs( piOrg[11] - piCur[11] );
+        uiSum += abs( piOrg[12] - piCur[12] );
+        uiSum += abs( piOrg[13] - piCur[13] );
+        uiSum += abs( piOrg[14] - piCur[14] );
+        uiSum += abs( piOrg[15] - piCur[15] );
+        uiSum += abs( piOrg[16] - piCur[16] );
+        uiSum += abs( piOrg[17] - piCur[17] );
+        uiSum += abs( piOrg[18] - piCur[18] );
+        uiSum += abs( piOrg[19] - piCur[19] );
+        uiSum += abs( piOrg[20] - piCur[20] );
+        uiSum += abs( piOrg[21] - piCur[21] );
+        uiSum += abs( piOrg[22] - piCur[22] );
+        uiSum += abs( piOrg[23] - piCur[23] );
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+#if PCC_RDO_EXT
+  }
+#endif
   uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
@@ -1000,12 +1564,19 @@ Distortion TComRdCost::xGetSAD64( DistParam* pcDtParam )
 
   Distortion uiSum = 0;
 
+#if PCC_RDO_EXT
+  
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+  if (pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   if( pcDtParam->bitDepth <= 10 )
   {
     for( ; iRows != 0; iRows-=iSubStep )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , 64 );
+      uiSum += simdSADLine8n16b(piOrg, piCur, 64, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
     }
@@ -1015,78 +1586,169 @@ Distortion TComRdCost::xGetSAD64( DistParam* pcDtParam )
 #endif
   for( ; iRows != 0; iRows-=iSubStep )
   {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
-    uiSum += abs( piOrg[8] - piCur[8] );
-    uiSum += abs( piOrg[9] - piCur[9] );
-    uiSum += abs( piOrg[10] - piCur[10] );
-    uiSum += abs( piOrg[11] - piCur[11] );
-    uiSum += abs( piOrg[12] - piCur[12] );
-    uiSum += abs( piOrg[13] - piCur[13] );
-    uiSum += abs( piOrg[14] - piCur[14] );
-    uiSum += abs( piOrg[15] - piCur[15] );
-    uiSum += abs( piOrg[16] - piCur[16] );
-    uiSum += abs( piOrg[17] - piCur[17] );
-    uiSum += abs( piOrg[18] - piCur[18] );
-    uiSum += abs( piOrg[19] - piCur[19] );
-    uiSum += abs( piOrg[20] - piCur[20] );
-    uiSum += abs( piOrg[21] - piCur[21] );
-    uiSum += abs( piOrg[22] - piCur[22] );
-    uiSum += abs( piOrg[23] - piCur[23] );
-    uiSum += abs( piOrg[24] - piCur[24] );
-    uiSum += abs( piOrg[25] - piCur[25] );
-    uiSum += abs( piOrg[26] - piCur[26] );
-    uiSum += abs( piOrg[27] - piCur[27] );
-    uiSum += abs( piOrg[28] - piCur[28] );
-    uiSum += abs( piOrg[29] - piCur[29] );
-    uiSum += abs( piOrg[30] - piCur[30] );
-    uiSum += abs( piOrg[31] - piCur[31] );
-    uiSum += abs( piOrg[32] - piCur[32] );
-    uiSum += abs( piOrg[33] - piCur[33] );
-    uiSum += abs( piOrg[34] - piCur[34] );
-    uiSum += abs( piOrg[35] - piCur[35] );
-    uiSum += abs( piOrg[36] - piCur[36] );
-    uiSum += abs( piOrg[37] - piCur[37] );
-    uiSum += abs( piOrg[38] - piCur[38] );
-    uiSum += abs( piOrg[39] - piCur[39] );
-    uiSum += abs( piOrg[40] - piCur[40] );
-    uiSum += abs( piOrg[41] - piCur[41] );
-    uiSum += abs( piOrg[42] - piCur[42] );
-    uiSum += abs( piOrg[43] - piCur[43] );
-    uiSum += abs( piOrg[44] - piCur[44] );
-    uiSum += abs( piOrg[45] - piCur[45] );
-    uiSum += abs( piOrg[46] - piCur[46] );
-    uiSum += abs( piOrg[47] - piCur[47] );
-    uiSum += abs( piOrg[48] - piCur[48] );
-    uiSum += abs( piOrg[49] - piCur[49] );
-    uiSum += abs( piOrg[50] - piCur[50] );
-    uiSum += abs( piOrg[51] - piCur[51] );
-    uiSum += abs( piOrg[52] - piCur[52] );
-    uiSum += abs( piOrg[53] - piCur[53] );
-    uiSum += abs( piOrg[54] - piCur[54] );
-    uiSum += abs( piOrg[55] - piCur[55] );
-    uiSum += abs( piOrg[56] - piCur[56] );
-    uiSum += abs( piOrg[57] - piCur[57] );
-    uiSum += abs( piOrg[58] - piCur[58] );
-    uiSum += abs( piOrg[59] - piCur[59] );
-    uiSum += abs( piOrg[60] - piCur[60] );
-    uiSum += abs( piOrg[61] - piCur[61] );
-    uiSum += abs( piOrg[62] - piCur[62] );
-    uiSum += abs( piOrg[63] - piCur[63] );
-
+    tmp = abs( piOrg[ 0] - piCur[ 0] ) * ((piOccupancy[ 0] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 1] - piCur[ 1] ) * ((piOccupancy[ 1] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 2] - piCur[ 2] ) * ((piOccupancy[ 2] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 3] - piCur[ 3] ) * ((piOccupancy[ 3] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 4] - piCur[ 4] ) * ((piOccupancy[ 4] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 5] - piCur[ 5] ) * ((piOccupancy[ 5] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 6] - piCur[ 6] ) * ((piOccupancy[ 6] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 7] - piCur[ 7] ) * ((piOccupancy[ 7] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 8] - piCur[ 8] ) * ((piOccupancy[ 8] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 9] - piCur[ 9] ) * ((piOccupancy[ 9] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[10] - piCur[10] ) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[11] - piCur[11] ) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[12] - piCur[12] ) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[13] - piCur[13] ) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[14] - piCur[14] ) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[15] - piCur[15] ) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[16] - piCur[16] ) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[17] - piCur[17] ) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[18] - piCur[18] ) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[19] - piCur[19] ) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[20] - piCur[20] ) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[21] - piCur[21] ) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[22] - piCur[22] ) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[23] - piCur[23] ) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[24] - piCur[24] ) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[25] - piCur[25] ) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[26] - piCur[26] ) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[27] - piCur[27] ) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[28] - piCur[28] ) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[29] - piCur[29] ) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[30] - piCur[30] ) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[31] - piCur[31] ) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[32] - piCur[32] ) * ((piOccupancy[32] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[33] - piCur[33] ) * ((piOccupancy[33] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[34] - piCur[34] ) * ((piOccupancy[34] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[35] - piCur[35] ) * ((piOccupancy[35] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[36] - piCur[36] ) * ((piOccupancy[36] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[37] - piCur[37] ) * ((piOccupancy[37] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[38] - piCur[38] ) * ((piOccupancy[38] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[39] - piCur[39] ) * ((piOccupancy[39] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[40] - piCur[40] ) * ((piOccupancy[40] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[41] - piCur[41] ) * ((piOccupancy[41] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[42] - piCur[42] ) * ((piOccupancy[42] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[43] - piCur[43] ) * ((piOccupancy[43] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[44] - piCur[44] ) * ((piOccupancy[44] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[45] - piCur[45] ) * ((piOccupancy[45] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[46] - piCur[46] ) * ((piOccupancy[46] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[47] - piCur[47] ) * ((piOccupancy[47] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[48] - piCur[48] ) * ((piOccupancy[48] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[49] - piCur[49] ) * ((piOccupancy[49] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[50] - piCur[50] ) * ((piOccupancy[50] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[51] - piCur[51] ) * ((piOccupancy[51] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[52] - piCur[52] ) * ((piOccupancy[52] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[53] - piCur[53] ) * ((piOccupancy[53] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[54] - piCur[54] ) * ((piOccupancy[54] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[55] - piCur[55] ) * ((piOccupancy[55] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[56] - piCur[56] ) * ((piOccupancy[56] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[57] - piCur[57] ) * ((piOccupancy[57] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[58] - piCur[58] ) * ((piOccupancy[58] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[59] - piCur[59] ) * ((piOccupancy[59] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[60] - piCur[60] ) * ((piOccupancy[60] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[61] - piCur[61] ) * ((piOccupancy[61] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[62] - piCur[62] ) * ((piOccupancy[62] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[63] - piCur[63] ) * ((piOccupancy[63] != 0) ? 1 : 0); uiSum += tmp;
+    
+    piOccupancy += iStrideOccupancy;
     piOrg += iStrideOrg;
     piCur += iStrideCur;
   }
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   }
 #endif
+  }else{
+#endif
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , 64);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
+        uiSum += abs( piOrg[4] - piCur[4] );
+        uiSum += abs( piOrg[5] - piCur[5] );
+        uiSum += abs( piOrg[6] - piCur[6] );
+        uiSum += abs( piOrg[7] - piCur[7] );
+        uiSum += abs( piOrg[8] - piCur[8] );
+        uiSum += abs( piOrg[9] - piCur[9] );
+        uiSum += abs( piOrg[10] - piCur[10] );
+        uiSum += abs( piOrg[11] - piCur[11] );
+        uiSum += abs( piOrg[12] - piCur[12] );
+        uiSum += abs( piOrg[13] - piCur[13] );
+        uiSum += abs( piOrg[14] - piCur[14] );
+        uiSum += abs( piOrg[15] - piCur[15] );
+        uiSum += abs( piOrg[16] - piCur[16] );
+        uiSum += abs( piOrg[17] - piCur[17] );
+        uiSum += abs( piOrg[18] - piCur[18] );
+        uiSum += abs( piOrg[19] - piCur[19] );
+        uiSum += abs( piOrg[20] - piCur[20] );
+        uiSum += abs( piOrg[21] - piCur[21] );
+        uiSum += abs( piOrg[22] - piCur[22] );
+        uiSum += abs( piOrg[23] - piCur[23] );
+        uiSum += abs( piOrg[24] - piCur[24] );
+        uiSum += abs( piOrg[25] - piCur[25] );
+        uiSum += abs( piOrg[26] - piCur[26] );
+        uiSum += abs( piOrg[27] - piCur[27] );
+        uiSum += abs( piOrg[28] - piCur[28] );
+        uiSum += abs( piOrg[29] - piCur[29] );
+        uiSum += abs( piOrg[30] - piCur[30] );
+        uiSum += abs( piOrg[31] - piCur[31] );
+        uiSum += abs( piOrg[32] - piCur[32] );
+        uiSum += abs( piOrg[33] - piCur[33] );
+        uiSum += abs( piOrg[34] - piCur[34] );
+        uiSum += abs( piOrg[35] - piCur[35] );
+        uiSum += abs( piOrg[36] - piCur[36] );
+        uiSum += abs( piOrg[37] - piCur[37] );
+        uiSum += abs( piOrg[38] - piCur[38] );
+        uiSum += abs( piOrg[39] - piCur[39] );
+        uiSum += abs( piOrg[40] - piCur[40] );
+        uiSum += abs( piOrg[41] - piCur[41] );
+        uiSum += abs( piOrg[42] - piCur[42] );
+        uiSum += abs( piOrg[43] - piCur[43] );
+        uiSum += abs( piOrg[44] - piCur[44] );
+        uiSum += abs( piOrg[45] - piCur[45] );
+        uiSum += abs( piOrg[46] - piCur[46] );
+        uiSum += abs( piOrg[47] - piCur[47] );
+        uiSum += abs( piOrg[48] - piCur[48] );
+        uiSum += abs( piOrg[49] - piCur[49] );
+        uiSum += abs( piOrg[50] - piCur[50] );
+        uiSum += abs( piOrg[51] - piCur[51] );
+        uiSum += abs( piOrg[52] - piCur[52] );
+        uiSum += abs( piOrg[53] - piCur[53] );
+        uiSum += abs( piOrg[54] - piCur[54] );
+        uiSum += abs( piOrg[55] - piCur[55] );
+        uiSum += abs( piOrg[56] - piCur[56] );
+        uiSum += abs( piOrg[57] - piCur[57] );
+        uiSum += abs( piOrg[58] - piCur[58] );
+        uiSum += abs( piOrg[59] - piCur[59] );
+        uiSum += abs( piOrg[60] - piCur[60] );
+        uiSum += abs( piOrg[61] - piCur[61] );
+        uiSum += abs( piOrg[62] - piCur[62] );
+        uiSum += abs( piOrg[63] - piCur[63] );
 
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+#if PCC_RDO_EXT
+  }
+#endif
   uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
@@ -1106,13 +1768,19 @@ Distortion TComRdCost::xGetSAD48( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg*iSubStep;
 
   Distortion uiSum = 0;
-
+#if PCC_RDO_EXT
+  
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy*iSubStep;
+  Intermediate_Int  tmp;
+  if(pcDtParam->useRDO){
 #if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
   if( pcDtParam->bitDepth <= 10 )
   {
     for( ; iRows != 0; iRows-=iSubStep )
     {
-      uiSum += simdSADLine8n16b( piOrg , piCur , 48 );
+      uiSum += simdSADLine8n16b(piOrg, piCur, 48, piOccupancy, true);
+      piOccupancy += iStrideOccupancy;
       piOrg += iStrideOrg;
       piCur += iStrideCur;
     }
@@ -1122,55 +1790,56 @@ Distortion TComRdCost::xGetSAD48( DistParam* pcDtParam )
 #endif
   for( ; iRows != 0; iRows-=iSubStep )
   {
-    uiSum += abs( piOrg[0] - piCur[0] );
-    uiSum += abs( piOrg[1] - piCur[1] );
-    uiSum += abs( piOrg[2] - piCur[2] );
-    uiSum += abs( piOrg[3] - piCur[3] );
-    uiSum += abs( piOrg[4] - piCur[4] );
-    uiSum += abs( piOrg[5] - piCur[5] );
-    uiSum += abs( piOrg[6] - piCur[6] );
-    uiSum += abs( piOrg[7] - piCur[7] );
-    uiSum += abs( piOrg[8] - piCur[8] );
-    uiSum += abs( piOrg[9] - piCur[9] );
-    uiSum += abs( piOrg[10] - piCur[10] );
-    uiSum += abs( piOrg[11] - piCur[11] );
-    uiSum += abs( piOrg[12] - piCur[12] );
-    uiSum += abs( piOrg[13] - piCur[13] );
-    uiSum += abs( piOrg[14] - piCur[14] );
-    uiSum += abs( piOrg[15] - piCur[15] );
-    uiSum += abs( piOrg[16] - piCur[16] );
-    uiSum += abs( piOrg[17] - piCur[17] );
-    uiSum += abs( piOrg[18] - piCur[18] );
-    uiSum += abs( piOrg[19] - piCur[19] );
-    uiSum += abs( piOrg[20] - piCur[20] );
-    uiSum += abs( piOrg[21] - piCur[21] );
-    uiSum += abs( piOrg[22] - piCur[22] );
-    uiSum += abs( piOrg[23] - piCur[23] );
-    uiSum += abs( piOrg[24] - piCur[24] );
-    uiSum += abs( piOrg[25] - piCur[25] );
-    uiSum += abs( piOrg[26] - piCur[26] );
-    uiSum += abs( piOrg[27] - piCur[27] );
-    uiSum += abs( piOrg[28] - piCur[28] );
-    uiSum += abs( piOrg[29] - piCur[29] );
-    uiSum += abs( piOrg[30] - piCur[30] );
-    uiSum += abs( piOrg[31] - piCur[31] );
-    uiSum += abs( piOrg[32] - piCur[32] );
-    uiSum += abs( piOrg[33] - piCur[33] );
-    uiSum += abs( piOrg[34] - piCur[34] );
-    uiSum += abs( piOrg[35] - piCur[35] );
-    uiSum += abs( piOrg[36] - piCur[36] );
-    uiSum += abs( piOrg[37] - piCur[37] );
-    uiSum += abs( piOrg[38] - piCur[38] );
-    uiSum += abs( piOrg[39] - piCur[39] );
-    uiSum += abs( piOrg[40] - piCur[40] );
-    uiSum += abs( piOrg[41] - piCur[41] );
-    uiSum += abs( piOrg[42] - piCur[42] );
-    uiSum += abs( piOrg[43] - piCur[43] );
-    uiSum += abs( piOrg[44] - piCur[44] );
-    uiSum += abs( piOrg[45] - piCur[45] );
-    uiSum += abs( piOrg[46] - piCur[46] );
-    uiSum += abs( piOrg[47] - piCur[47] );
-
+    tmp = abs( piOrg[ 0] - piCur[ 0] ) * ((piOccupancy[ 0] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 1] - piCur[ 1] ) * ((piOccupancy[ 1] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 2] - piCur[ 2] ) * ((piOccupancy[ 2] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 3] - piCur[ 3] ) * ((piOccupancy[ 3] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 4] - piCur[ 4] ) * ((piOccupancy[ 4] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 5] - piCur[ 5] ) * ((piOccupancy[ 5] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 6] - piCur[ 6] ) * ((piOccupancy[ 6] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 7] - piCur[ 7] ) * ((piOccupancy[ 7] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 8] - piCur[ 8] ) * ((piOccupancy[ 8] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[ 9] - piCur[ 9] ) * ((piOccupancy[ 9] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[10] - piCur[10] ) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[11] - piCur[11] ) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[12] - piCur[12] ) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[13] - piCur[13] ) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[14] - piCur[14] ) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[15] - piCur[15] ) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[16] - piCur[16] ) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[17] - piCur[17] ) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[18] - piCur[18] ) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[19] - piCur[19] ) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[20] - piCur[20] ) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[21] - piCur[21] ) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[22] - piCur[22] ) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[23] - piCur[23] ) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[24] - piCur[24] ) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[25] - piCur[25] ) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[26] - piCur[26] ) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[27] - piCur[27] ) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[28] - piCur[28] ) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[29] - piCur[29] ) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[30] - piCur[30] ) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[31] - piCur[31] ) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[32] - piCur[32] ) * ((piOccupancy[32] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[33] - piCur[33] ) * ((piOccupancy[33] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[34] - piCur[34] ) * ((piOccupancy[34] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[35] - piCur[35] ) * ((piOccupancy[35] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[36] - piCur[36] ) * ((piOccupancy[36] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[37] - piCur[37] ) * ((piOccupancy[37] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[38] - piCur[38] ) * ((piOccupancy[38] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[39] - piCur[39] ) * ((piOccupancy[39] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[40] - piCur[40] ) * ((piOccupancy[40] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[41] - piCur[41] ) * ((piOccupancy[41] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[42] - piCur[42] ) * ((piOccupancy[42] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[43] - piCur[43] ) * ((piOccupancy[43] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[44] - piCur[44] ) * ((piOccupancy[44] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[45] - piCur[45] ) * ((piOccupancy[45] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[46] - piCur[46] ) * ((piOccupancy[46] != 0) ? 1 : 0); uiSum += tmp;
+    tmp = abs( piOrg[47] - piCur[47] ) * ((piOccupancy[47] != 0) ? 1 : 0); uiSum += tmp;
+    
+    piOccupancy += iStrideOccupancy;
     piOrg += iStrideOrg;
     piCur += iStrideCur;
   }
@@ -1178,6 +1847,81 @@ Distortion TComRdCost::xGetSAD48( DistParam* pcDtParam )
   }
 #endif
 
+  }else{
+#endif
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    if( pcDtParam->bitDepth <= 10 )
+    {
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += simdSADLine8n16b( piOrg , piCur , 48);
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+    }
+    else
+    {
+#endif
+      for( ; iRows != 0; iRows-=iSubStep )
+      {
+        uiSum += abs( piOrg[0] - piCur[0] );
+        uiSum += abs( piOrg[1] - piCur[1] );
+        uiSum += abs( piOrg[2] - piCur[2] );
+        uiSum += abs( piOrg[3] - piCur[3] );
+        uiSum += abs( piOrg[4] - piCur[4] );
+        uiSum += abs( piOrg[5] - piCur[5] );
+        uiSum += abs( piOrg[6] - piCur[6] );
+        uiSum += abs( piOrg[7] - piCur[7] );
+        uiSum += abs( piOrg[8] - piCur[8] );
+        uiSum += abs( piOrg[9] - piCur[9] );
+        uiSum += abs( piOrg[10] - piCur[10] );
+        uiSum += abs( piOrg[11] - piCur[11] );
+        uiSum += abs( piOrg[12] - piCur[12] );
+        uiSum += abs( piOrg[13] - piCur[13] );
+        uiSum += abs( piOrg[14] - piCur[14] );
+        uiSum += abs( piOrg[15] - piCur[15] );
+        uiSum += abs( piOrg[16] - piCur[16] );
+        uiSum += abs( piOrg[17] - piCur[17] );
+        uiSum += abs( piOrg[18] - piCur[18] );
+        uiSum += abs( piOrg[19] - piCur[19] );
+        uiSum += abs( piOrg[20] - piCur[20] );
+        uiSum += abs( piOrg[21] - piCur[21] );
+        uiSum += abs( piOrg[22] - piCur[22] );
+        uiSum += abs( piOrg[23] - piCur[23] );
+        uiSum += abs( piOrg[24] - piCur[24] );
+        uiSum += abs( piOrg[25] - piCur[25] );
+        uiSum += abs( piOrg[26] - piCur[26] );
+        uiSum += abs( piOrg[27] - piCur[27] );
+        uiSum += abs( piOrg[28] - piCur[28] );
+        uiSum += abs( piOrg[29] - piCur[29] );
+        uiSum += abs( piOrg[30] - piCur[30] );
+        uiSum += abs( piOrg[31] - piCur[31] );
+        uiSum += abs( piOrg[32] - piCur[32] );
+        uiSum += abs( piOrg[33] - piCur[33] );
+        uiSum += abs( piOrg[34] - piCur[34] );
+        uiSum += abs( piOrg[35] - piCur[35] );
+        uiSum += abs( piOrg[36] - piCur[36] );
+        uiSum += abs( piOrg[37] - piCur[37] );
+        uiSum += abs( piOrg[38] - piCur[38] );
+        uiSum += abs( piOrg[39] - piCur[39] );
+        uiSum += abs( piOrg[40] - piCur[40] );
+        uiSum += abs( piOrg[41] - piCur[41] );
+        uiSum += abs( piOrg[42] - piCur[42] );
+        uiSum += abs( piOrg[43] - piCur[43] );
+        uiSum += abs( piOrg[44] - piCur[44] );
+        uiSum += abs( piOrg[45] - piCur[45] );
+        uiSum += abs( piOrg[46] - piCur[46] );
+        uiSum += abs( piOrg[47] - piCur[47] );
+
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if VECTOR_CODING__DISTORTION_CALCULATIONS && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
+    }
+#endif
+#if PCC_RDO_EXT
+  }
+#endif
   uiSum <<= iSubShift;
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8) );
 }
@@ -1204,20 +1948,39 @@ Distortion TComRdCost::xGetSSE( DistParam* pcDtParam )
 
   Intermediate_Int iTemp;
 
-  for( ; iRows != 0; iRows-- )
-  {
-    for (Int n = 0; n < iCols; n++ )
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
+    const Pel* piOccupancy = pcDtParam->pOccupancy;
+    Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+    for( ; iRows != 0; iRows-- )
     {
-      iTemp = piOrg[n  ] - piCur[n  ];
-      uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      for (Int n = 0; n < iCols; n++ )
+      {
+        iTemp = (piOrg[n] - piCur[n]) * ((piOccupancy[n] != 0) ? 1 : 0);
+        uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      }
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
     }
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
+  }else{
+#endif
+      for( ; iRows != 0; iRows-- )
+      {
+        for (Int n = 0; n < iCols; n++ )
+        {
+          iTemp = piOrg[n  ] - piCur[n  ];
+          uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        }
+        piOrg += iStrideOrg;
+        piCur += iStrideCur;
+      }
+#if PCC_RDO_EXT
+    }
+#endif
+    return ( uiSum );
   }
-
-  return ( uiSum );
-}
-
+  
 Distortion TComRdCost::xGetSSE4( DistParam* pcDtParam )
 {
   if ( pcDtParam->bApplyWeight )
@@ -1236,18 +1999,37 @@ Distortion TComRdCost::xGetSSE4( DistParam* pcDtParam )
 
   Intermediate_Int  iTemp;
 
-  for( ; iRows != 0; iRows-- )
-  {
-
-    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+  
+#if PCC_RDO_EXT
+  if (pcDtParam->useRDO){
+    const Pel* piOccupancy = pcDtParam->pOccupancy;
+    Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
+    }
+  }else{
+#endif
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = piOrg[0] - piCur[0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[1] - piCur[1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[2] - piCur[2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[3] - piCur[3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
 
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+    }
+#if PCC_RDO_EXT
   }
-
+#endif
   return ( uiSum );
 }
 
@@ -1268,22 +2050,45 @@ Distortion TComRdCost::xGetSSE8( DistParam* pcDtParam )
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
   Intermediate_Int  iTemp;
-
-  for( ; iRows != 0; iRows-- )
-  {
-    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[4] - piCur[4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[5] - piCur[5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[6] - piCur[6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[7] - piCur[7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
+  
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
+    const Pel* piOccupancy = pcDtParam->pOccupancy;
+    Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
+    }
+  }else{
+#endif
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = piOrg[0] - piCur[0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[1] - piCur[1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[2] - piCur[2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[3] - piCur[3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[4] - piCur[4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[5] - piCur[5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[6] - piCur[6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[7] - piCur[7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+    }
+#if PCC_RDO_EXT
   }
-
+#endif
   return ( uiSum );
 }
 
@@ -1305,9 +2110,38 @@ Distortion TComRdCost::xGetSSE16( DistParam* pcDtParam )
 
   Intermediate_Int  iTemp;
 
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
+    const Pel* piOccupancy = pcDtParam->pOccupancy;
+    Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+    
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[8] - piCur[8]) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[9] - piCur[9]) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[10] - piCur[10]) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[11] - piCur[11]) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[12] - piCur[12]) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[13] - piCur[13]) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[14] - piCur[14]) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[15] - piCur[15]) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
+    }
+  }else{
+#endif
   for( ; iRows != 0; iRows-- )
   {
-
     iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
     iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
     iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
@@ -1328,7 +2162,9 @@ Distortion TComRdCost::xGetSSE16( DistParam* pcDtParam )
     piOrg += iStrideOrg;
     piCur += iStrideCur;
   }
-
+#if PCC_RDO_EXT
+}
+#endif
   return ( uiSum );
 }
 
@@ -1350,33 +2186,65 @@ Distortion TComRdCost::xGetSSE16N( DistParam* pcDtParam )
 
   Intermediate_Int  iTemp;
 
-  for( ; iRows != 0; iRows-- )
-  {
-    for (Int n = 0; n < iCols; n+=16 )
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+  if(pcDtParam->useRDO){
+    for( ; iRows != 0; iRows-- )
     {
-
-      iTemp = piOrg[n+ 0] - piCur[n+ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 1] - piCur[n+ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 2] - piCur[n+ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 3] - piCur[n+ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 4] - piCur[n+ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 5] - piCur[n+ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 6] - piCur[n+ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 7] - piCur[n+ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 8] - piCur[n+ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 9] - piCur[n+ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+10] - piCur[n+10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+11] - piCur[n+11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+12] - piCur[n+12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+13] - piCur[n+13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+14] - piCur[n+14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+15] - piCur[n+15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-
+      for (Int n = 0; n < iCols; n+=16 )
+      {
+        iTemp = (piOrg[n + 0] - piCur[n + 0]) * ((piOccupancy[n + 0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 1] - piCur[n + 1]) * ((piOccupancy[n + 1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 2] - piCur[n + 2]) * ((piOccupancy[n + 2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 3] - piCur[n + 3]) * ((piOccupancy[n + 3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 4] - piCur[n + 4]) * ((piOccupancy[n + 4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 5] - piCur[n + 5]) * ((piOccupancy[n + 5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 6] - piCur[n + 6]) * ((piOccupancy[n + 6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 7] - piCur[n + 7]) * ((piOccupancy[n + 7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 8] - piCur[n + 8]) * ((piOccupancy[n + 8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 9] - piCur[n + 9]) * ((piOccupancy[n + 9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 10] - piCur[n + 10]) * ((piOccupancy[n + 10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 11] - piCur[n + 11]) * ((piOccupancy[n + 11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 12] - piCur[n + 12]) * ((piOccupancy[n + 12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 13] - piCur[n + 13]) * ((piOccupancy[n + 13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 14] - piCur[n + 14]) * ((piOccupancy[n + 14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+        iTemp = (piOrg[n + 15] - piCur[n + 15]) * ((piOccupancy[n + 15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      }
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
     }
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
+  }else{
+#endif
+    for( ; iRows != 0; iRows-- )
+    {
+      for (Int n = 0; n < iCols; n+=16 )
+      {
+        iTemp = piOrg[n+ 0] - piCur[n+ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 1] - piCur[n+ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 2] - piCur[n+ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 3] - piCur[n+ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 4] - piCur[n+ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 5] - piCur[n+ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 6] - piCur[n+ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 7] - piCur[n+ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 8] - piCur[n+ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+ 9] - piCur[n+ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+10] - piCur[n+10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+11] - piCur[n+11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+12] - piCur[n+12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+13] - piCur[n+13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+14] - piCur[n+14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        iTemp = piOrg[n+15] - piCur[n+15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+        
+      }
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+    }
+#if PCC_RDO_EXT
   }
-
+#endif
   return ( uiSum );
 }
 
@@ -1392,52 +2260,97 @@ Distortion TComRdCost::xGetSSE32( DistParam* pcDtParam )
   Int  iRows   = pcDtParam->iRows;
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
-
+  
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
-
   Intermediate_Int  iTemp;
-
-  for( ; iRows != 0; iRows-- )
-  {
-
-    iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[16] - piCur[16]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[17] - piCur[17]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[18] - piCur[18]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[19] - piCur[19]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[20] - piCur[20]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[21] - piCur[21]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[22] - piCur[22]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[23] - piCur[23]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[24] - piCur[24]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[25] - piCur[25]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[26] - piCur[26]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[27] - piCur[27]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[28] - piCur[28]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[29] - piCur[29]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[30] - piCur[30]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[31] - piCur[31]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
-  }
-
+  
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+  if(pcDtParam->useRDO){
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[8] - piCur[8]) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[9] - piCur[9]) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[10] - piCur[10]) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[11] - piCur[11]) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[12] - piCur[12]) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[13] - piCur[13]) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[14] - piCur[14]) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[15] - piCur[15]) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[16] - piCur[16]) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[17] - piCur[17]) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[18] - piCur[18]) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[19] - piCur[19]) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[20] - piCur[20]) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[21] - piCur[21]) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[22] - piCur[22]) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[23] - piCur[23]) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[24] - piCur[24]) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[25] - piCur[25]) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[26] - piCur[26]) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[27] - piCur[27]) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[28] - piCur[28]) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[29] - piCur[29]) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[30] - piCur[30]) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[31] - piCur[31]) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
+    }
+  }else{
+#endif
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[16] - piCur[16]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[17] - piCur[17]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[18] - piCur[18]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[19] - piCur[19]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[20] - piCur[20]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[21] - piCur[21]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[22] - piCur[22]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[23] - piCur[23]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[24] - piCur[24]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[25] - piCur[25]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[26] - piCur[26]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[27] - piCur[27]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[28] - piCur[28]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[29] - piCur[29]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[30] - piCur[30]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[31] - piCur[31]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+    }
+#if PCC_RDO_EXT
+}
+#endif
   return ( uiSum );
 }
 
@@ -1453,83 +2366,161 @@ Distortion TComRdCost::xGetSSE64( DistParam* pcDtParam )
   Int  iRows   = pcDtParam->iRows;
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
-
+  
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
   Intermediate_Int  iTemp;
-
-  for( ; iRows != 0; iRows-- )
-  {
-    iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[16] - piCur[16]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[17] - piCur[17]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[18] - piCur[18]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[19] - piCur[19]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[20] - piCur[20]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[21] - piCur[21]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[22] - piCur[22]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[23] - piCur[23]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[24] - piCur[24]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[25] - piCur[25]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[26] - piCur[26]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[27] - piCur[27]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[28] - piCur[28]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[29] - piCur[29]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[30] - piCur[30]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[31] - piCur[31]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[32] - piCur[32]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[33] - piCur[33]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[34] - piCur[34]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[35] - piCur[35]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[36] - piCur[36]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[37] - piCur[37]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[38] - piCur[38]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[39] - piCur[39]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[40] - piCur[40]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[41] - piCur[41]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[42] - piCur[42]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[43] - piCur[43]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[44] - piCur[44]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[45] - piCur[45]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[46] - piCur[46]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[47] - piCur[47]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[48] - piCur[48]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[49] - piCur[49]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[50] - piCur[50]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[51] - piCur[51]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[52] - piCur[52]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[53] - piCur[53]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[54] - piCur[54]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[55] - piCur[55]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[56] - piCur[56]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[57] - piCur[57]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[58] - piCur[58]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[59] - piCur[59]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[60] - piCur[60]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[61] - piCur[61]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[62] - piCur[62]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[63] - piCur[63]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-
-    piOrg += iStrideOrg;
-    piCur += iStrideCur;
+#if PCC_RDO_EXT
+  if(pcDtParam->useRDO){
+    const Pel* piOccupancy = pcDtParam->pOccupancy;
+    Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[8] - piCur[8]) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[9] - piCur[9]) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[10] - piCur[10]) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[11] - piCur[11]) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[12] - piCur[12]) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[13] - piCur[13]) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[14] - piCur[14]) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[15] - piCur[15]) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[16] - piCur[16]) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[17] - piCur[17]) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[18] - piCur[18]) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[19] - piCur[19]) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[20] - piCur[20]) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[21] - piCur[21]) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[22] - piCur[22]) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[23] - piCur[23]) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[24] - piCur[24]) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[25] - piCur[25]) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[26] - piCur[26]) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[27] - piCur[27]) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[28] - piCur[28]) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[29] - piCur[29]) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[30] - piCur[30]) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[31] - piCur[31]) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[32] - piCur[32]) * ((piOccupancy[32] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[33] - piCur[33]) * ((piOccupancy[33] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[34] - piCur[34]) * ((piOccupancy[34] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[35] - piCur[35]) * ((piOccupancy[35] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[36] - piCur[36]) * ((piOccupancy[36] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[37] - piCur[37]) * ((piOccupancy[37] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[38] - piCur[38]) * ((piOccupancy[38] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[39] - piCur[39]) * ((piOccupancy[39] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[40] - piCur[40]) * ((piOccupancy[40] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[41] - piCur[41]) * ((piOccupancy[41] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[42] - piCur[42]) * ((piOccupancy[42] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[43] - piCur[43]) * ((piOccupancy[43] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[44] - piCur[44]) * ((piOccupancy[44] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[45] - piCur[45]) * ((piOccupancy[45] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[46] - piCur[46]) * ((piOccupancy[46] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[47] - piCur[47]) * ((piOccupancy[47] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[48] - piCur[48]) * ((piOccupancy[48] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[49] - piCur[49]) * ((piOccupancy[49] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[50] - piCur[50]) * ((piOccupancy[50] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[51] - piCur[51]) * ((piOccupancy[51] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[52] - piCur[52]) * ((piOccupancy[52] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[53] - piCur[53]) * ((piOccupancy[53] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[54] - piCur[54]) * ((piOccupancy[54] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[55] - piCur[55]) * ((piOccupancy[55] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[56] - piCur[56]) * ((piOccupancy[56] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[57] - piCur[57]) * ((piOccupancy[57] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[58] - piCur[58]) * ((piOccupancy[58] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[59] - piCur[59]) * ((piOccupancy[59] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[60] - piCur[60]) * ((piOccupancy[60] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[61] - piCur[61]) * ((piOccupancy[61] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[62] - piCur[62]) * ((piOccupancy[62] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[63] - piCur[63]) * ((piOccupancy[63] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+      piOccupancy += iStrideOccupancy;
+    }
+  }else{
+#endif
+    for( ; iRows != 0; iRows-- )
+    {
+      iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[16] - piCur[16]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[17] - piCur[17]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[18] - piCur[18]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[19] - piCur[19]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[20] - piCur[20]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[21] - piCur[21]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[22] - piCur[22]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[23] - piCur[23]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[24] - piCur[24]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[25] - piCur[25]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[26] - piCur[26]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[27] - piCur[27]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[28] - piCur[28]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[29] - piCur[29]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[30] - piCur[30]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[31] - piCur[31]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[32] - piCur[32]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[33] - piCur[33]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[34] - piCur[34]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[35] - piCur[35]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[36] - piCur[36]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[37] - piCur[37]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[38] - piCur[38]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[39] - piCur[39]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[40] - piCur[40]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[41] - piCur[41]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[42] - piCur[42]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[43] - piCur[43]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[44] - piCur[44]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[45] - piCur[45]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[46] - piCur[46]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[47] - piCur[47]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[48] - piCur[48]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[49] - piCur[49]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[50] - piCur[50]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[51] - piCur[51]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[52] - piCur[52]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[53] - piCur[53]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[54] - piCur[54]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[55] - piCur[55]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[56] - piCur[56]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[57] - piCur[57]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[58] - piCur[58]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[59] - piCur[59]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[60] - piCur[60]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[61] - piCur[61]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[62] - piCur[62]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      iTemp = piOrg[63] - piCur[63]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+      
+      piOrg += iStrideOrg;
+      piCur += iStrideCur;
+    }
+#if PCC_RDO_EXT
   }
-
+#endif
   return ( uiSum );
 }
 
@@ -1666,24 +2657,24 @@ Distortion TComRdCost::xCalcHADs8x8( const Pel *piOrg, const Pel *piCur, Int iSt
   {
     return( simdHADs8x8( piOrg , piCur , iStrideOrg , iStrideCur ) );
   }
-#endif
+#endif //Vector
   Int k, i, j, jj;
   Distortion sad = 0;
   TCoeff diff[64], m1[8][8], m2[8][8], m3[8][8];
   assert( iStep == 1 );
   for( k = 0; k < 64; k += 8 )
   {
-    diff[k+0] = piOrg[0] - piCur[0];
-    diff[k+1] = piOrg[1] - piCur[1];
-    diff[k+2] = piOrg[2] - piCur[2];
-    diff[k+3] = piOrg[3] - piCur[3];
-    diff[k+4] = piOrg[4] - piCur[4];
-    diff[k+5] = piOrg[5] - piCur[5];
-    diff[k+6] = piOrg[6] - piCur[6];
-    diff[k+7] = piOrg[7] - piCur[7];
-
-    piCur += iStrideCur;
-    piOrg += iStrideOrg;
+      diff[k+0] = piOrg[0] - piCur[0];
+      diff[k+1] = piOrg[1] - piCur[1];
+      diff[k+2] = piOrg[2] - piCur[2];
+      diff[k+3] = piOrg[3] - piCur[3];
+      diff[k+4] = piOrg[4] - piCur[4];
+      diff[k+5] = piOrg[5] - piCur[5];
+      diff[k+6] = piOrg[6] - piCur[6];
+      diff[k+7] = piOrg[7] - piCur[7];
+      
+      piCur += iStrideCur;
+      piOrg += iStrideOrg;
   }
 
   //horizontal
@@ -1778,7 +2769,6 @@ Distortion TComRdCost::xGetHADs( DistParam* pcDtParam )
   const Int  iStep      = pcDtParam->iStep;
 
   Int  x, y;
-
   Distortion uiSum = 0;
 
   if( ( iRows % 8 == 0) && (iCols % 8 == 0) )
@@ -1837,6 +2827,4 @@ Distortion TComRdCost::xGetHADs( DistParam* pcDtParam )
 }
 
 //! \}
-
-
 } // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComRdCost.h b/source/Lib/TLibCommon/TComRdCost.h
index 5a51c98..56c6b00 100644
--- a/source/Lib/TLibCommon/TComRdCost.h
+++ b/source/Lib/TLibCommon/TComRdCost.h
@@ -70,6 +70,11 @@ class DistParam
 public:
   const Pel*            pOrg;
   const Pel*            pCur;
+#if PCC_RDO_EXT
+  const Pel*            pOccupancy;
+  Int                   iStrideOccupancy;
+  bool                  useRDO;
+#endif
   Int                   iStrideOrg;
   Int                   iStrideCur;
   Int                   iRows;
@@ -92,6 +97,11 @@ public:
   DistParam()
    : pOrg(NULL),
      pCur(NULL),
+#if PCC_RDO_EXT
+     pOccupancy(NULL),
+     iStrideOccupancy(0),
+     useRDO(false),
+#endif
      iStrideOrg(0),
      iStrideCur(0),
      iRows(0),
@@ -132,10 +142,15 @@ private:
   Bool                    m_useColourTrans;
   Bool                    m_useLL;
 
+#if PCC_RDO_EXT
+  Bool                    m_usePCCRDO;
+#endif
 public:
   TComRdCost();
   virtual ~TComRdCost();
-
+#if PCC_RDO_EXT
+  Void setPCCRDO(Bool usePCCRDO){m_usePCCRDO = usePCCRDO;}
+#endif
   Double calcRdCost( Double numBits, Distortion distortion, DFunc eDFunc = DF_DEFAULT );
 
   Void    setDistortionWeight  ( const ComponentID compID, const Double distortionWeight ) { m_distortionWeight[compID] = distortionWeight; }
@@ -158,8 +173,13 @@ public:
   Void    setDistParam( UInt uiBlkWidth, UInt uiBlkHeight, DFunc eDFunc, DistParam& rcDistParam );
   Void    setDistParam( const TComPattern* const pcPatternKey, const Pel* piRefY, Int iRefStride,            DistParam& rcDistParam );
   Void    setDistParam( const TComPattern* const pcPatternKey, const Pel* piRefY, Int iRefStride, Int iStep, DistParam& rcDistParam, Bool bHADME=false );
-  Void    setDistParam( DistParam& rcDP, Int bitDepth, const Pel* p1, Int iStride1, const Pel* p2, Int iStride2, Int iWidth, Int iHeight, Bool bHadamard = false );
 
+  Void    setDistParam( DistParam& rcDP, Int bitDepth, const Pel* p1, Int iStride1, const Pel* p2, Int iStride2, Int iWidth, Int iHeight, Bool bHadamard = false
+#if PCC_RDO_EXT
+                                  ,const Pel* pOcc = NULL, Int iStrideOcc = 0
+#endif
+                       );
+  
   Distortion calcHAD(Int bitDepth, const Pel* pi0, Int iStride0, const Pel* pi1, Int iStride1, Int iWidth, Int iHeight );
 
   // for motion cost
@@ -277,7 +297,11 @@ private:
 
 public:
 
+#if PCC_RDO_EXT
+  Distortion   getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc = DF_SSE, const Pel* piOccupancy = NULL, Int iOccupancyStride = 0);
+#else
   Distortion   getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc = DF_SSE );
+#endif
 
 };// END CLASS DEFINITION TComRdCost
 
diff --git a/source/Lib/TLibCommon/TypeDef.h b/source/Lib/TLibCommon/TypeDef.h
index efd14a4..f72e00b 100644
--- a/source/Lib/TLibCommon/TypeDef.h
+++ b/source/Lib/TLibCommon/TypeDef.h
@@ -51,7 +51,9 @@ namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
-
+//!
+#define PCC_RDO_EXT                                       1
+#define PCC_RDO_EXT_SAD                                   1
 #define PCC_ME_EXT                                        1
 
 #if PCC_ME_EXT
diff --git a/source/Lib/TLibEncoder/TEncCfg.h b/source/Lib/TLibEncoder/TEncCfg.h
index 09b04d4..7b305cc 100644
--- a/source/Lib/TLibEncoder/TEncCfg.h
+++ b/source/Lib/TLibEncoder/TEncCfg.h
@@ -138,6 +138,10 @@ protected:
 	Bool        m_usePCCExt;
 	//std::string m_patchInfoFileName;
 #endif
+#if PCC_RDO_EXT
+  Bool        m_usePCCRDOExt;
+#endif
+
   //==== File I/O ========
   Int       m_iFrameRate;
   Int       m_FrameSkip;
@@ -584,7 +588,11 @@ public:
   Void setUsePCCExt(Bool value) { m_usePCCExt = value; }
   Bool getUsePCCExt()         const { return m_usePCCExt; }
 #endif
-
+#if PCC_RDO_EXT
+  Void setUsePCCRDOExt(Bool value) { m_usePCCRDOExt = value; }
+  Bool getUsePCCRDOExt()      const { return m_usePCCRDOExt; }
+#endif
+  
   Void setProfile(Profile::Name profile) { m_profile = profile; }
   Void setLevel(Level::Tier tier, Level::Name level) { m_levelTier = tier; m_level = level; }
 
diff --git a/source/Lib/TLibEncoder/TEncCu.cpp b/source/Lib/TLibEncoder/TEncCu.cpp
index ec44f02..eec2fec 100644
--- a/source/Lib/TLibEncoder/TEncCu.cpp
+++ b/source/Lib/TLibEncoder/TEncCu.cpp
@@ -76,7 +76,10 @@ Void TEncCu::create(UChar uhTotalDepth, UInt uiMaxWidth, UInt uiMaxHeight, Chrom
   m_ppcRecoYuvTemp = new TComYuv*[m_uhTotalDepth-1];
   m_ppcOrigYuv     = new TComYuv*[m_uhTotalDepth-1];
   m_ppcNoCorrYuv   = new TComYuv*[m_uhTotalDepth-1];
-
+#if PCC_RDO_EXT
+  m_ppcOccupancyYuv = new TComYuv*[m_uhTotalDepth - 1];
+#endif
+  
   UInt uiNumPartitions;
   for( i=0 ; i<m_uhTotalDepth-1 ; i++)
   {
@@ -97,6 +100,9 @@ Void TEncCu::create(UChar uhTotalDepth, UInt uiMaxWidth, UInt uiMaxHeight, Chrom
 
     m_ppcOrigYuv    [i] = new TComYuv; m_ppcOrigYuv    [i]->create(uiWidth, uiHeight, chromaFormat);
     m_ppcNoCorrYuv  [i] = new TComYuv; m_ppcNoCorrYuv  [i]->create(uiWidth, uiHeight, chromaFormat);
+#if PCC_RDO_EXT
+    m_ppcOccupancyYuv[i] = new TComYuv; m_ppcOccupancyYuv[i]->create(uiWidth, uiHeight, chromaFormat);
+#endif
   }
 
   m_bEncodeDQP                     = false;
@@ -159,6 +165,12 @@ Void TEncCu::destroy()
     {
       m_ppcNoCorrYuv[i]->destroy();   delete m_ppcNoCorrYuv[i];   m_ppcNoCorrYuv[i] = NULL;
     }
+#if PCC_RDO_EXT
+    if (m_ppcOccupancyYuv[i])
+    {
+      m_ppcOccupancyYuv[i]->destroy(); delete m_ppcOccupancyYuv[i]; m_ppcOccupancyYuv[i] = NULL;
+    }
+#endif
   }
   if(m_ppcBestCU)
   {
@@ -211,6 +223,13 @@ Void TEncCu::destroy()
     delete [] m_ppcNoCorrYuv;
     m_ppcNoCorrYuv = NULL;
   }
+#if PCC_RDO_EXT
+  if (m_ppcOccupancyYuv)
+  {
+    delete[] m_ppcOccupancyYuv;
+    m_ppcOccupancyYuv = NULL;
+  }
+#endif
 }
 
 /** \param    pcEncTop      pointer of encoder class
@@ -500,7 +519,9 @@ Void TEncCu::xCompressCU( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU, const
 
   // get Original YUV data from picture
   m_ppcOrigYuv[uiDepth]->copyFromPicYuv( pcPic->getPicYuvOrg(), rpcBestCU->getCtuRsAddr(), rpcBestCU->getZorderIdxInCtu() );
-
+#if PCC_RDO_EXT
+  m_ppcOccupancyYuv[uiDepth]->copyFromPicYuv(pcPic->getOccupancyMapYuv(), rpcBestCU->getCtuRsAddr(), rpcBestCU->getZorderIdxInCtu());
+#endif
   // variable for Cbf fast mode PU decision
   Bool    doNotBlockPu = true;
   Bool    earlyDetectionSkipMode = false;
@@ -1896,7 +1917,11 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                          (uiNoResidual != 0),
                                                          m_ppcNoCorrYuv  [uhDepth],
                                                          (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                        );
             }
             else
             {
@@ -1909,7 +1934,11 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                          (uiNoResidual != 0),
                                                          m_ppcNoCorrYuv  [uhDepth],
                                                          ACT_TWO_CLR
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                        );
             }
           }
           else
@@ -1923,7 +1952,12 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                        (uiNoResidual != 0),
                                                        m_ppcNoCorrYuv  [uhDepth],
                                                        ACT_ORG_CLR
-                                                       DEBUG_STRING_PASS_INTO(tmpStr) );
+#if PCC_RDO_EXT
+                                                      DEBUG_STRING_PASS_INTO(tmpStr),
+                                                      m_ppcOccupancyYuv[uhDepth]);
+#else
+            DEBUG_STRING_PASS_INTO(tmpStr) );
+#endif
           }
           rpcTempCU->setSkipFlagSubParts( rpcTempCU->getQtRootCbf(0) == 0, 0, uhDepth );
 
@@ -1982,7 +2016,11 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                        (uiNoResidual != 0),
                                                        m_ppcNoCorrYuv  [uhDepth],
                                                        (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                       DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                       DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                    , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                     );
             rpcTempCU->setSkipFlagSubParts( rpcTempCU->getQtRootCbf(0) == 0, 0, uhDepth );
             Double rdCost = rpcTempCU->getTotalCost();
             if(rdCost < m_ppcBestCU[uhDepth]->getTmpInterRDCost() )
@@ -2074,9 +2112,21 @@ Void TEncCu::xCheckRDCostInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU,
 
 #if AMP_MRG
   rpcTempCU->setMergeAMP (true);
-  Bool valid = m_pcPredSearch->predInterSearch ( rpcTempCU, m_ppcOrigYuv[uhDepth], m_ppcPredYuvTemp[uhDepth], m_ppcResiYuvTemp[uhDepth], m_ppcRecoYuvTemp[uhDepth] DEBUG_STRING_PASS_INTO(sTest), false, bUseMRG, iMVCandList );
+  Bool valid = m_pcPredSearch->predInterSearch ( rpcTempCU,
+                                                m_ppcOrigYuv[uhDepth],
+                                                m_ppcPredYuvTemp[uhDepth],
+                                                m_ppcResiYuvTemp[uhDepth],
+                                                m_ppcRecoYuvTemp[uhDepth] DEBUG_STRING_PASS_INTO(sTest),
+#if PCC_RDO_EXT
+                                                m_ppcOccupancyYuv[uhDepth],
+#endif
+                                                false, bUseMRG, iMVCandList );
 #else
-  Bool valid = m_pcPredSearch->predInterSearch ( rpcTempCU, m_ppcOrigYuv[uhDepth], m_ppcPredYuvTemp[uhDepth], m_ppcResiYuvTemp[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, iMVCandList );
+  Bool valid = m_pcPredSearch->predInterSearch ( rpcTempCU, m_ppcOrigYuv[uhDepth], m_ppcPredYuvTemp[uhDepth], m_ppcResiYuvTemp[uhDepth], m_ppcRecoYuvTemp[uhDepth],
+#if PCC_RDO_EXT
+                                                m_ppcOccupancyYuv[uhDepth],
+#endif
+                                                false, iMVCandList );
 #endif
 
   if( !valid )
@@ -2120,16 +2170,28 @@ Void TEncCu::xCheckRDCostInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU,
       {
         if ( !getEnableInterTUACT() )
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                    , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                 );
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
       }
       else
       {
+#if PCC_RDO_EXT
+        m_pcPredSearch->encodeResAndCalcRdInterCU(rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest), m_ppcOccupancyYuv[uhDepth]);
+#else
         m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+#endif
       }
     }
     else
@@ -2138,22 +2200,38 @@ Void TEncCu::xCheckRDCostInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU,
       {
         if ( !getEnableInterTUACT() )
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
       }
       else
       {
         if ( !getEnableInterTUACT() )
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
       }
     }
@@ -2254,11 +2332,19 @@ Void TEncCu::xCheckRDCostIntra( TComDataCU *&rpcBestCU,
 
   if( bRGBIntraModeReuse )
   {
-    m_pcPredSearch->estIntraPredLumaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma );
+    m_pcPredSearch->estIntraPredLumaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma
+#if PCC_RDO_EXT
+                                                    , m_ppcOccupancyYuv[uiDepth]
+#endif
+                                                    );
   }
   else
   {
+#if PCC_RDO_EXT
+    m_pcPredSearch->estIntraPredLumaQT(rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcOccupancyYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest));
+#else
     m_pcPredSearch->estIntraPredLumaQT( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest) );
+#endif
   }
 
   m_ppcRecoYuvTemp[uiDepth]->copyToPicComponent(COMPONENT_Y, rpcTempCU->getPic()->getPicYuvRec(), rpcTempCU->getCtuRsAddr(), rpcTempCU->getZorderIdxInCtu() );
@@ -2267,11 +2353,19 @@ Void TEncCu::xCheckRDCostIntra( TComDataCU *&rpcBestCU,
   {
     if( bRGBIntraModeReuse )
     {
-      m_pcPredSearch->estIntraPredChromaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma );
+      m_pcPredSearch->estIntraPredChromaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma
+#if PCC_RDO_EXT
+                                                    , m_ppcOccupancyYuv[uiDepth]
+#endif
+                                                    );
     }
     else
     {
+#if PCC_RDO_EXT
+      m_pcPredSearch->estIntraPredChromaQT(rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcOccupancyYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest));
+#else
       m_pcPredSearch->estIntraPredChromaQT( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest) );
+#endif
     }
   }
 
@@ -2793,7 +2887,11 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                          (noResidual != 0),
                                                          m_ppcNoCorrYuv  [depth],
                                                          (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                        );
             }
             else
             {
@@ -2806,7 +2904,12 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                          (noResidual != 0),
                                                          m_ppcNoCorrYuv  [depth],
                                                          ACT_TWO_CLR
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                        );
+
             }
           }
           else
@@ -2820,7 +2923,12 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                        (noResidual != 0),
                                                        m_ppcNoCorrYuv  [depth],
                                                        ACT_ORG_CLR
-                                                       DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                       DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                        );
+
           }
 
           if ((noResidual == 0) && (rpcTempCU->getQtRootCbf(0) == 0))
@@ -2859,7 +2967,11 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                        (noResidual != 0),
                                                        m_ppcNoCorrYuv  [depth],
                                                        (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                       DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                       DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                        );
             rpcTempCU->setSkipFlagSubParts( rpcTempCU->getQtRootCbf(0) == 0, 0, depth );
             //Double rdCost = rpcTempCU->getTotalCost();
 
@@ -2898,7 +3010,11 @@ Void TEncCu::xCheckRDCostIntraCSC( TComDataCU     *&rpcBestCU,
   rpcTempCU->setPredModeSubParts( MODE_INTRA, 0, depth );
   rpcTempCU->setChromaQpAdjSubParts( rpcTempCU->getCUTransquantBypass(0) ? 0 : m_cuChromaQpOffsetIdxPlus1, 0, depth );
 
-  m_pcPredSearch->estIntraPredQTCT( rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth], m_ppcRecoYuvTemp[depth], eACTRDTestType, bReuseIntraMode DEBUG_STRING_PASS_INTO(sTest) );
+  m_pcPredSearch->estIntraPredQTCT( rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth], m_ppcRecoYuvTemp[depth], eACTRDTestType, bReuseIntraMode DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                              , m_ppcOccupancyYuv[depth]
+#endif
+                                   );
 
   m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[depth][CI_CURR_BEST]);
   m_pcEntropyCoder->resetBits();
@@ -2981,6 +3097,9 @@ Void TEncCu::xCheckRDCostIntraBC( TComDataCU *&rpcBestCU,
                                                     bUse1DSearchFor8x8,
                                                     false,
                                                     testPredOnly
+#if PCC_RDO_EXT
+                                                   , m_ppcOccupancyYuv[depth]
+#endif
                                                   );
 
   if ( bValid && (rpcTempCU->getWidth( 0 ) <= 16) && (eSize == SIZE_2NxN || eSize == SIZE_Nx2N) )
@@ -3032,16 +3151,30 @@ Void TEncCu::xCheckRDCostIntraBC( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableIBCTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
         }
       }
       else
@@ -3050,22 +3183,42 @@ Void TEncCu::xCheckRDCostIntraBC( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableIBCTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
         else
         {
           if ( !getEnableIBCTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
       }
@@ -3172,6 +3325,9 @@ Void TEncCu::xCheckRDCostIntraBCMixed( TComDataCU *&rpcBestCU,
                                                              DEBUG_STRING_PASS_INTO( sTest ),
                                                              iMVCandList,
                                                              false
+#if PCC_RDO_EXT
+                                                            ,m_ppcOccupancyYuv[depth]
+#endif
                                                            );
 
   if ( bValid )
@@ -3205,16 +3361,30 @@ Void TEncCu::xCheckRDCostIntraBCMixed( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
         }
       }
       else
@@ -3223,22 +3393,42 @@ Void TEncCu::xCheckRDCostIntraBCMixed( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                     );
+
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
         else
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                     );
+
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
       }
@@ -3346,16 +3536,30 @@ Void TEncCu::xCheckRDCostHashInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTemp
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
         }
       }
       else
@@ -3364,22 +3568,41 @@ Void TEncCu::xCheckRDCostHashInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTemp
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
         else
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
+
           }
         }
       }
@@ -3453,9 +3676,14 @@ UInt TEncCu::xCheckPaletteMode(TComDataCU *&rpcBestCU, TComDataCU *&rpcTempCU, B
   rpcTempCU->setPaletteModeFlagSubParts(true, 0, rpcTempCU->getDepth(0));
   rpcTempCU->setChromaQpAdjSubParts( rpcTempCU->getCUTransquantBypass(0) ? 0 : m_cuChromaQpOffsetIdxPlus1, 0, depth );
 
+  
+#if PCC_RDO_EXT
+  UInt testedModes=m_pcPredSearch->paletteSearch(rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth],
+                                                 m_ppcRecoYuvTemp[depth], forcePalettePrediction, iterNumber, paletteSize, m_ppcOccupancyYuv[depth]);
+#else
   UInt testedModes=m_pcPredSearch->paletteSearch(rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth],
                                                  m_ppcRecoYuvTemp[depth], forcePalettePrediction, iterNumber, paletteSize);
-
+#endif
   xCheckDQP( rpcTempCU );
   DEBUG_STRING_NEW(a)
   DEBUG_STRING_NEW(b)
diff --git a/source/Lib/TLibEncoder/TEncCu.h b/source/Lib/TLibEncoder/TEncCu.h
index e1c9708..f1ba0d7 100644
--- a/source/Lib/TLibEncoder/TEncCu.h
+++ b/source/Lib/TLibEncoder/TEncCu.h
@@ -79,7 +79,9 @@ private:
   TComYuv**               m_ppcRecoYuvTemp; ///< Temporary Reconstruction Yuv for each depth
   TComYuv**               m_ppcOrigYuv;     ///< Original Yuv for each depth
   TComYuv**               m_ppcNoCorrYuv;
-
+#if PCC_RDO_EXT
+  TComYuv**               m_ppcOccupancyYuv;
+#endif
   //  Data : encoder control
   Bool                    m_bEncodeDQP;
   Bool                    m_bFastDeltaQP;
diff --git a/source/Lib/TLibEncoder/TEncGOP.cpp b/source/Lib/TLibEncoder/TEncGOP.cpp
index c578133..e1d4d4f 100644
--- a/source/Lib/TLibEncoder/TEncGOP.cpp
+++ b/source/Lib/TLibEncoder/TEncGOP.cpp
@@ -1225,9 +1225,17 @@ printHash(const HashType hashType, const std::string &digestStr)
 Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rcListPic,
                            TComList<TComPicYuv*>& rcListPicYuvRecOut, std::list<AccessUnit>& accessUnitsInGOP,
 #if PCC_ME_EXT
-	                       Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePccME)
+	                       Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePccME
+#if PCC_RDO_EXT
+                          , Bool usePCCRDO
+#endif
+                          )
 #else
-                           Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl )
+                           Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl
+#if PCC_RDO_EXT
+                          , Bool usePCCRDO
+#endif
+)
 #endif
 {
   // TODO: Split this function up.
@@ -1774,6 +1782,11 @@ Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rc
     const Int numSubstreams        = numSubstreamRows * numSubstreamsColumns;
     std::vector<TComOutputBitstream> substreamsOut(numSubstreams);
 
+      
+#if PCC_RDO_EXT
+      m_pcSliceEncoder->setUsePCCRDO(usePCCRDO);
+#endif
+      
     // now compress (trial encode) the various slice segments (slices, and dependent slices)
     {
       const UInt numberOfCtusInFrame=pcPic->getPicSym()->getNumberOfCtusInFrame();
@@ -1809,7 +1822,7 @@ Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rc
 			size_t readSize = fread(blockToPatch, sizeof(long long), blockToPatchWidth * blockToPatchHeight, blockToPatchFile);
 			if (readSize != blockToPatchWidth * blockToPatchHeight)
 			{
-				printf("error: Resolution does not match");
+				printf("error: Resolution does not match : usePccME");
 			}
 			fclose(blockToPatchFile);
 
@@ -1822,7 +1835,7 @@ Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rc
 			readSize = fread(occupancyMap, sizeof(Int), picWidth * picHeight, occupancyMapFile);
 			if (readSize != picWidth * picHeight)
 			{
-				printf("error: Resolution does not match");
+				printf("error: Resolution does not match: usePccME");
 			}
 			fclose(occupancyMapFile);
 		}
@@ -1834,7 +1847,80 @@ Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rc
 			}
 		}
 #endif
-        m_pcSliceEncoder->compressSlice   ( pcPic, false, false );
+        
+        
+#if PCC_RDO_EXT
+    if (usePCCRDO)
+    {
+      Int picWidth = pcPic->getPicYuvRec()->getWidth(COMPONENT_Y);
+      Int picHeight = pcPic->getPicYuvRec()->getHeight(COMPONENT_Y);
+      Int currPOC = pcSlice->getPOC();           // One occupancy map for one frame
+
+      long long offset = (long long)currPOC * picWidth * picHeight;
+      std::string occupancyMapFileName = m_pcEncTop->getOccupancyMapFileName();
+      FILE* occupancyMapFile = NULL;
+
+      occupancyMapFile = fopen(occupancyMapFileName.c_str(), "rb");
+      fseek(occupancyMapFile, offset * sizeof(unsigned char), SEEK_SET);
+      unsigned char* tempOccupancyMap = new unsigned char[picWidth * picHeight];
+      size_t readSize = fread(tempOccupancyMap, sizeof(unsigned char), picWidth * picHeight, occupancyMapFile);
+      if (readSize != picWidth * picHeight)
+      {
+        printf("error: Resolution does not match : usePCCRDO picWidthxpicHeight= %dx%d(%lu)\treadSize: %zu\n", picWidth, picHeight, picWidth*picHeight*sizeof(Int), readSize);
+      }
+      fclose(occupancyMapFile);
+
+      TComPicYuv* occupancyMap = pcPic->getOccupancyMapYuv();
+      Pel* lumaAddr = occupancyMap->getAddr(COMPONENT_Y);
+      Int lumaStride = occupancyMap->getStride(COMPONENT_Y);
+      Pel maxPel = ~0;
+      // Luma
+      for (Int i = 0; i < picHeight; i++)
+      {
+        for (Int j = 0; j < picWidth; j++)
+        {
+          lumaAddr[i * lumaStride + j] = tempOccupancyMap[i * picWidth + j] ? maxPel : 0;
+        }
+      }
+      //chroma format can be 400 (not like PCC)
+      if(occupancyMap->getNumberValidComponents()>1){
+        Pel* cbAddr = occupancyMap->getAddr(COMPONENT_Cb);
+        Pel* crAddr = occupancyMap->getAddr(COMPONENT_Cr);
+        Int chromaStride = occupancyMap->getStride(COMPONENT_Cb);
+        Int chromaHeight = occupancyMap->getHeight(COMPONENT_Cb);
+        Int chromaWidth = occupancyMap->getWidth(COMPONENT_Cb);
+        
+        // chroma
+        if(occupancyMap->getChromaFormat() == CHROMA_420){
+          for (Int i = 0; i < chromaHeight; i++)
+          {
+            for (Int j = 0; j < chromaWidth; j++)
+            {
+                auto tempOccVal=tempOccupancyMap[i * 2 * picWidth + j * 2];
+              for(Int ii=0; ii<2; ii++)
+                for(Int jj=0; jj<2; jj++){
+                  if(tempOccupancyMap[(i * 2+ii) * picWidth + j * 2+jj]) tempOccVal=maxPel;
+                }
+                cbAddr[i * chromaStride + j] =  tempOccVal;
+                crAddr[i * chromaStride + j] = tempOccVal;
+            }
+          }
+        }else if(occupancyMap->getChromaFormat() == CHROMA_444){
+          for (Int i = 0; i < chromaHeight; i++)
+          {
+            for (Int j = 0; j < chromaWidth; j++)
+            {
+              cbAddr[i * chromaStride + j] = tempOccupancyMap[i * picWidth + j ]==0 ? 0:maxPel;
+              crAddr[i * chromaStride + j] = tempOccupancyMap[i * picWidth + j ]==0 ? 0:maxPel;
+            }
+          }
+        }
+      }
+      delete [] tempOccupancyMap;
+      tempOccupancyMap = NULL;
+    }
+#endif
+        m_pcSliceEncoder->compressSlice   ( pcPic, false, false);
 
         const UInt curSliceSegmentEnd = pcSlice->getSliceSegmentCurEndCtuTsAddr();
         if (curSliceSegmentEnd < numberOfCtusInFrame)
@@ -3849,5 +3935,4 @@ TComSPS* TEncGOP::getSPS(Int id)
 }
 //! \}
 
-
 } // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncGOP.h b/source/Lib/TLibEncoder/TEncGOP.h
index 8a77131..d361ac7 100644
--- a/source/Lib/TLibEncoder/TEncGOP.h
+++ b/source/Lib/TLibEncoder/TEncGOP.h
@@ -170,9 +170,17 @@ public:
   Void  init        ( TEncTop* pcTEncTop );
   Void  compressGOP ( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rcListPic, TComList<TComPicYuv*>& rcListPicYuvRec,
 #if PCC_ME_EXT
-	                 std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool m_usePCCExt);
+	                 std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool m_usePCCExt
+#if PCC_RDO_EXT
+                     , Bool usePCCRDOExt
+#endif
+                     );
 #else
-                     std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl );
+                     std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion ip_conversion, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl
+#if PCC_RDO_EXT
+  , Bool usePCCRDOExt
+#endif
+  );
 #endif
   Void  xAttachSliceDataToNalUnit (OutputNALUnit& rNalu, TComOutputBitstream* pcBitstreamRedirect);
 
diff --git a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
index 25ff06e..8bf1ade 100644
--- a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
+++ b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
@@ -255,8 +255,15 @@ Void TEncSampleAdaptiveOffset::SAOProcess(TComPic* pPic, Bool* sliceEnabled, con
   srcYuv->setBorderExtension(false);
   srcYuv->extendPicBorder();
 
+#if PCC_RDO_EXT
+  TComPicYuv* occupancyYuv = pPic->getOccupancyMapYuv();
+#endif
   //collect statistics
+#if PCC_RDO_EXT
+  getStatistics(m_statData, orgYuv, occupancyYuv, srcYuv, pPic);
+#else
   getStatistics(m_statData, orgYuv, srcYuv, pPic);
+#endif
   if(isPreDBFSamplesUsed)
   {
     addPreDBFStatistics(m_statData);
@@ -276,7 +283,11 @@ Void TEncSampleAdaptiveOffset::SAOProcess(TComPic* pPic, Bool* sliceEnabled, con
 
 Void TEncSampleAdaptiveOffset::getPreDBFStatistics(TComPic* pPic)
 {
+#if PCC_RDO_EXT
+  getStatistics(m_preDBFstatData, pPic->getPicYuvOrg(), pPic->getOccupancyMapYuv(), pPic->getPicYuvRec(), pPic, true);
+#else
   getStatistics(m_preDBFstatData, pPic->getPicYuvOrg(), pPic->getPicYuvRec(), pPic, true);
+#endif
 }
 
 Void TEncSampleAdaptiveOffset::addPreDBFStatistics(SAOStatData*** blkStats)
@@ -292,8 +303,11 @@ Void TEncSampleAdaptiveOffset::addPreDBFStatistics(SAOStatData*** blkStats)
     }
   }
 }
-
+#if PCC_RDO_EXT
+Void TEncSampleAdaptiveOffset::getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* occupancyYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples)
+#else
 Void TEncSampleAdaptiveOffset::getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples)
+#endif
 {
   Bool isLeftAvail,isRightAvail,isAboveAvail,isBelowAvail,isAboveLeftAvail,isAboveRightAvail,isBelowLeftAvail,isBelowRightAvail;
 
@@ -329,9 +343,16 @@ Void TEncSampleAdaptiveOffset::getStatistics(SAOStatData*** blkStats, TComPicYuv
 
       Int  orgStride  = orgYuv->getStride(component);
       Pel* orgBlk     = orgYuv->getAddr(component) + ((yPos >> componentScaleY) * orgStride) + (xPos >> componentScaleX);
-
+#if PCC_RDO_EXT
+      Int  occupancyStride = occupancyYuv->getStride(component);
+      Pel* occupancyBlk = occupancyYuv->getAddr(component) + ((yPos >> componentScaleY) * orgStride) + (xPos >> componentScaleX);
+#endif
       getBlkStats(component, pPic->getPicSym()->getSPS().getBitDepth(toChannelType(component)), blkStats[ctuRsAddr][component]
+#if PCC_RDO_EXT
+                , srcBlk, orgBlk, occupancyBlk, srcStride, orgStride, occupancyStride, (width >> componentScaleX), (height >> componentScaleY)
+#else
                 , srcBlk, orgBlk, srcStride, orgStride, (width  >> componentScaleX), (height >> componentScaleY)
+#endif
                 , isLeftAvail,  isRightAvail, isAboveAvail, isBelowAvail, isAboveLeftAvail, isAboveRightAvail
                 , isCalculatePreDeblockSamples
                 );
@@ -942,7 +963,11 @@ Void TEncSampleAdaptiveOffset::decideBlkParams(TComPic* pic, Bool* sliceEnabled,
 
 
 Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes
+#if PCC_RDO_EXT
+                        , Pel* srcBlk, Pel* orgBlk, Pel* occupancyBlk, Int srcStride, Int orgStride, Int occupancyStride, Int width, Int height
+#else
                         , Pel* srcBlk, Pel* orgBlk, Int srcStride, Int orgStride, Int width, Int height
+#endif
                         , Bool isLeftAvail,  Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail
                         , Bool isCalculatePreDeblockSamples
                         )
@@ -972,7 +997,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
   Pel *srcLine, *orgLine;
   Int* skipLinesR = m_skipLinesR[compIdx];
   Int* skipLinesB = m_skipLinesB[compIdx];
-
+#if PCC_RDO_EXT
+  Pel *occupancyLine;
+#endif
   for(Int typeIdx=0; typeIdx< NUM_SAO_NEW_TYPES; typeIdx++)
   {
     SAOStatData& statsData= statsDataTypes[typeIdx];
@@ -980,6 +1007,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
 
     srcLine = srcBlk;
     orgLine = orgBlk;
+#if PCC_RDO_EXT
+    occupancyLine = occupancyBlk;
+#endif
     diff    = statsData.diff;
     count   = statsData.count;
     switch(typeIdx)
@@ -1003,12 +1033,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
             signRight =  (SChar)sgn(srcLine[x] - srcLine[x+1]);
             edgeType  =  signRight + signLeft;
             signLeft  = -signRight;
-
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
             diff [edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
+#endif
           }
           srcLine  += srcStride;
           orgLine  += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1025,12 +1065,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
                 signRight =  (SChar)sgn(srcLine[x] - srcLine[x+1]);
                 edgeType  =  signRight + signLeft;
                 signLeft  = -signRight;
-
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
                 diff [edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1054,6 +1104,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
         {
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
 
         Pel* srcLineAbove = srcLine - srcStride;
@@ -1072,12 +1125,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
             signDown  = (SChar)sgn(srcLine[x] - srcLineBelow[x]);
             edgeType  = signDown + signUpLine[x];
             signUpLine[x]= -signDown;
-
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
             diff [edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
+#endif
           }
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1094,11 +1157,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x<endX; x++)
               {
                 edgeType = sgn(srcLine[x] - srcLineBelow[x]) + sgn(srcLine[x] - srcLineAbove[x]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
                 diff [edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1137,12 +1211,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
         for(x=firstLineStartX; x<firstLineEndX; x++)
         {
           edgeType = sgn(srcLine[x] - srcLineAbove[x-1]) - signUpLine[x+1];
+#if PCC_RDO_EXT
+          if (occupancyLine[x])
+          {
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
+            count[edgeType] ++;
+          }
+#else
           diff [edgeType] += (orgLine[x] - srcLine[x]);
           count[edgeType] ++;
+#endif
         }
         srcLine  += srcStride;
         orgLine  += orgStride;
-
+#if PCC_RDO_EXT
+        occupancyLine += occupancyStride;
+#endif
 
         //middle lines
         for (y=1; y<endY; y++)
@@ -1153,9 +1237,16 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
           {
             signDown = (SChar)sgn(srcLine[x] - srcLineBelow[x+1]);
             edgeType = signDown + signUpLine[x];
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
             diff [edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
-
+#endif
             signDownLine[x+1] = -signDown;
           }
           signDownLine[startX] = (SChar)sgn(srcLineBelow[startX] - srcLine[startX-1]);
@@ -1166,6 +1257,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
 
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1182,11 +1276,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x< endX; x++)
               {
                 edgeType = sgn(srcLine[x] - srcLineBelow[x+1]) + sgn(srcLine[x] - srcLineAbove[x-1]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
                 diff [edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1225,13 +1330,23 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
         for(x=firstLineStartX; x<firstLineEndX; x++)
         {
           edgeType = sgn(srcLine[x] - srcLineAbove[x+1]) - signUpLine[x-1];
+#if PCC_RDO_EXT
+          if (occupancyLine[x])
+          {
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
+            count[edgeType] ++;
+          }
+#else
           diff [edgeType] += (orgLine[x] - srcLine[x]);
           count[edgeType] ++;
+#endif
         }
 
         srcLine += srcStride;
         orgLine += orgStride;
-
+#if PCC_RDO_EXT
+        occupancyLine += occupancyStride;
+#endif
         //middle lines
         for (y=1; y<endY; y++)
         {
@@ -1241,15 +1356,24 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
           {
             signDown = (SChar)sgn(srcLine[x] - srcLineBelow[x-1]);
             edgeType = signDown + signUpLine[x];
-
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
             diff [edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
-
+#endif
             signUpLine[x-1] = -signDown;
           }
           signUpLine[endX-1] = (SChar)sgn(srcLineBelow[endX-1] - srcLine[endX]);
           srcLine  += srcStride;
           orgLine  += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1266,11 +1390,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x<endX; x++)
               {
                 edgeType = sgn(srcLine[x] - srcLineBelow[x-1]) + sgn(srcLine[x] - srcLineAbove[x+1]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
                 diff [edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1292,11 +1427,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
           {
 
             Int bandIdx= srcLine[x] >> shiftBits;
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[bandIdx] += (orgLine[x] - srcLine[x]);
+              count[bandIdx] ++;
+            }
+#else
             diff [bandIdx] += (orgLine[x] - srcLine[x]);
             count[bandIdx] ++;
+#endif
           }
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1310,12 +1456,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x< endX; x++)
               {
                 Int bandIdx= srcLine[x] >> shiftBits;
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[bandIdx] += (orgLine[x] - srcLine[x]);
+                  count[bandIdx] ++;
+                }
+#else
                 diff [bandIdx] += (orgLine[x] - srcLine[x]);
                 count[bandIdx] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
-
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
 
           }
diff --git a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
index 8c37482..1ecfe9d 100644
--- a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
+++ b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
@@ -112,14 +112,22 @@ public:
 public: //methods
   Void getPreDBFStatistics(TComPic* pPic);
 private: //methods
+#if PCC_RDO_EXT
+  Void getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* occupancyYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples = false);
+#else
   Void getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* srcYuv,TComPic* pPic, Bool isCalculatePreDeblockSamples = false);
+#endif
 #if ADD_RESET_ENCODER_DECISIONS_AFTER_IRAP
   Void decidePicParams(Bool* sliceEnabled, const TComPic* pic, const Double saoEncodingRate, const Double saoEncodingRateChroma);
 #else
   Void decidePicParams(Bool* sliceEnabled, const TComPic* pic, const Double saoEncodingRate, const Double saoEncodingRateChroma, const Bool bResetStateAfterIRAP);
 #endif
   Void decideBlkParams(TComPic* pic, Bool* sliceEnabled, SAOStatData*** blkStats, TComPicYuv* srcYuv, TComPicYuv* resYuv, SAOBlkParam* reconParams, SAOBlkParam* codedParams, const Bool bTestSAODisableAtPictureLevel, const Double saoEncodingRate, const Double saoEncodingRateChroma);
+#if PCC_RDO_EXT
+  Void getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes, Pel* srcBlk, Pel* orgBlk, Pel* occupancyBlk, Int srcStride, Int orgStride, Int occupancyStride, Int width, Int height, Bool isLeftAvail, Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail, Bool isCalculatePreDeblockSamples);
+#else
   Void getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes, Pel* srcBlk, Pel* orgBlk, Int srcStride, Int orgStride, Int width, Int height, Bool isLeftAvail,  Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail, Bool isCalculatePreDeblockSamples);
+#endif
   Void deriveModeNewRDO(const BitDepths &bitDepths, Int ctuRsAddr, SAOBlkParam* mergeList[NUM_SAO_MERGE_TYPES], Bool* sliceEnabled, SAOStatData*** blkStats, SAOBlkParam& modeParam, Double& modeNormCost, TEncSbac** cabacCoderRDO, Int inCabacLabel);
   Void deriveModeMergeRDO(const BitDepths &bitDepths, Int ctuRsAddr, SAOBlkParam* mergeList[NUM_SAO_MERGE_TYPES], Bool* sliceEnabled, SAOStatData*** blkStats, SAOBlkParam& modeParam, Double& modeNormCost, TEncSbac** cabacCoderRDO, Int inCabacLabel);
   Int64 getDistortion(const Int channelBitDepth, Int typeIdc, Int typeAuxInfo, Int* offsetVal, SAOStatData& statData);
diff --git a/source/Lib/TLibEncoder/TEncSearch.cpp b/source/Lib/TLibEncoder/TEncSearch.cpp
index 8420122..b68bc4c 100644
--- a/source/Lib/TLibEncoder/TEncSearch.cpp
+++ b/source/Lib/TLibEncoder/TEncSearch.cpp
@@ -1307,6 +1307,9 @@ UInt TEncSearch::xGetIntraBitsQTChroma(TComTU &rTu,
 }
 
 Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                            TComYuv*    pcOccupancyYuv,
+#endif
                                             TComYuv*    pcPredYuv,
                                             TComYuv*    pcResiYuv,
                                             Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
@@ -1339,6 +1342,9 @@ Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
   const UInt           uiHeight         = rect.height;
   const UInt           uiStride         = pcOrgYuv ->getStride (compID);
         Pel           *piOrg            = pcOrgYuv ->getAddr( compID, uiAbsPartIdx );
+#if PCC_RDO_EXT
+        Pel           *piOccupancy = pcOccupancyYuv->getAddr(compID, uiAbsPartIdx);
+#endif
         Pel           *piPred           = pcPredYuv->getAddr( compID, uiAbsPartIdx );
         Pel           *piResi           = pcResiYuv->getAddr( compID, uiAbsPartIdx );
         Pel           *piReco           = pcPredYuv->getAddr( compID, uiAbsPartIdx );
@@ -1601,7 +1607,11 @@ Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
   }
 
   //===== update distortion =====
+#if PCC_RDO_EXT
+  ruiDist += m_pcRdCost->getDistPart(bitDepth, piReco, uiStride, piOrg, uiStride, uiWidth, uiHeight, compID, DF_SSE, piOccupancy, uiStride);
+#else
   ruiDist += m_pcRdCost->getDistPart( bitDepth, piReco, uiStride, piOrg, uiStride, uiWidth, uiHeight, compID );
+#endif
 }
 
 
@@ -1618,7 +1628,12 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
 #endif
                                     Double&     dRDCost,
                                     TComTU&     rTu
+#if PCC_RDO_EXT
+                                    DEBUG_STRING_FN_DECLARE(sDebug),
+                                    TComYuv*    pcOccupancyYuv)
+#else
                                     DEBUG_STRING_FN_DECLARE(sDebug))
+#endif
 {
   TComDataCU   *pcCU          = rTu.getCU();
   const UInt    uiAbsPartIdx  = rTu.GetAbsPartIdxTU();
@@ -1719,7 +1734,11 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
 
 
         pcCU->setTransformSkipSubParts ( modeId, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
+#if PCC_RDO_EXT
+        xIntraCodingTUBlock(pcOrgYuv, pcOccupancyYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, singleDistTmpLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sModeString), default0Save1Load2);
+#else
         xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, singleDistTmpLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sModeString), default0Save1Load2 );
+#endif
 
         singleCbfTmpLuma = pcCU->getCbf( uiAbsPartIdx, COMPONENT_Y, uiTrDepth );
 
@@ -1788,8 +1807,11 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
       dSingleCost   = 0.0;
 
       pcCU ->setTransformSkipSubParts ( 0, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
+#if PCC_RDO_EXT
+      xIntraCodingTUBlock(pcOrgYuv, pcOccupancyYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, uiSingleDistLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sDebug));
+#else
       xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, uiSingleDistLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sDebug));
-
+#endif
       if( bCheckSplit )
       {
         uiSingleCbfLuma = pcCU->getCbf( uiAbsPartIdx, COMPONENT_Y, uiTrDepth );
@@ -1842,7 +1864,11 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
     {
       DEBUG_STRING_NEW(sChild)
 #if HHI_RQT_INTRA_SPEEDUP
+#if PCC_RDO_EXT
+       xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, bCheckFirst, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild), pcOccupancyYuv);
+#else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, bCheckFirst, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
+#endif
 #else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
 #endif
@@ -2137,7 +2163,12 @@ TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
                                       Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                       Distortion& ruiDist,
                                       TComTU&     rTu
+#if PCC_RDO_EXT
+                                      DEBUG_STRING_FN_DECLARE(sDebug),
+                                      TComYuv*    pcOccupancyYuv)
+#else
                                       DEBUG_STRING_FN_DECLARE(sDebug))
+#endif
 {
   TComDataCU         *pcCU                  = rTu.getCU();
   const UInt          uiTrDepth             = rTu.GetTransformDepthRel();
@@ -2239,8 +2270,11 @@ TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
             }
 
             singleDistCTmp = 0;
-
+#if PCC_RDO_EXT
+            xIntraCodingTUBlock(pcOrgYuv, pcOccupancyYuv, pcPredYuv, pcResiYuv, resiLuma, (crossCPredictionModeId != 0), singleDistCTmp, compID, TUIterator DEBUG_STRING_PASS_INTO(sDebugMode), default0Save1Load2);
+#else
             xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, (crossCPredictionModeId != 0), singleDistCTmp, compID, TUIterator DEBUG_STRING_PASS_INTO(sDebugMode), default0Save1Load2);
+#endif
             singleCbfCTmp = pcCU->getCbf( subTUAbsPartIdx, compID, uiTrDepth);
 
             if (  ((crossCPredictionModeId == 1) && (pcCU->getCrossComponentPredictionAlpha(subTUAbsPartIdx, compID) == 0))
@@ -2307,9 +2341,11 @@ TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
     do
     {
       DEBUG_STRING_NEW(sChild)
-
+#if PCC_RDO_EXT
+      xRecurIntraChromaCodingQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, ruiDist, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild), pcOccupancyYuv);
+#else
       xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, ruiDist, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
-
+#endif
       DEBUG_STRING_APPEND(sDebug, sChild)
       const UInt uiAbsPartIdxSub=tuRecurseChild.GetAbsPartIdxTU();
 
@@ -2395,6 +2431,9 @@ TEncSearch::xSetIntraResultChromaQT(TComYuv*    pcRecoYuv, TComTU &rTu)
 Void
 TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
                                TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                               TComYuv*    pcOccupancyYuv,
+#endif
                                TComYuv*    pcPredYuv,
                                TComYuv*    pcResiYuv,
                                TComYuv*    pcRecoYuv,
@@ -2482,9 +2521,17 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
       Pel* piOrg         = pcOrgYuv ->getAddr( COMPONENT_Y, uiAbsPartIdx );
       Pel* piPred        = pcPredYuv->getAddr( COMPONENT_Y, uiAbsPartIdx );
       UInt uiStride      = pcPredYuv->getStride( COMPONENT_Y );
+#if PCC_RDO_EXT
+      Pel* piOcc         = pcOccupancyYuv ->getAddr(COMPONENT_Y, uiAbsPartIdx);
+      UInt uiStrideOcc   = pcOccupancyYuv ->getStride(COMPONENT_Y);
+#endif
       DistParam distParam;
       const Bool bUseHadamard=pcCU->getCUTransquantBypass(0) == 0;
-      m_pcRdCost->setDistParam(distParam, sps.getBitDepth(CHANNEL_TYPE_LUMA), piOrg, uiStride, piPred, uiStride, puRect.width, puRect.height, bUseHadamard);
+      m_pcRdCost->setDistParam(distParam, sps.getBitDepth(CHANNEL_TYPE_LUMA), piOrg, uiStride, piPred, uiStride, puRect.width, puRect.height, bUseHadamard
+#if PCC_RDO_EXT
+        , piOcc, uiStrideOcc
+#endif
+        );
       distParam.bApplyWeight = false;
       for( Int modeIdx = 0; modeIdx < numModesAvailable; modeIdx++ )
       {
@@ -2580,7 +2627,11 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
       Distortion uiPUDistY = 0;
       Double     dPUCost   = 0.0;
 #if HHI_RQT_INTRA_SPEEDUP
+#if PCC_RDO_EXT
+      xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, true, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode), pcOccupancyYuv);
+#else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, true, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
+#endif
 #else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
 #endif
@@ -2667,9 +2718,11 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
       // determine residual for partition
       Distortion uiPUDistY = 0;
       Double     dPUCost   = 0.0;
-
+#if PCC_RDO_EXT
+      xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, false, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sModeTree), pcOccupancyYuv);
+#else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, false, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sModeTree));
-
+#endif
       // check r-d cost
       if( dPUCost < dBestPUCost )
       {
@@ -2781,6 +2834,9 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
 Void
 TEncSearch::estIntraPredChromaQT(TComDataCU* pcCU,
                                  TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                 TComYuv*    pcOccupancyYuv,
+#endif
                                  TComYuv*    pcPredYuv,
                                  TComYuv*    pcResiYuv,
                                  TComYuv*    pcRecoYuv,
@@ -2839,8 +2895,11 @@ TEncSearch::estIntraPredChromaQT(TComDataCU* pcCU,
           //----- chroma coding -----
           Distortion uiDist = 0;
           pcCU->setIntraDirSubParts  ( CHANNEL_TYPE_CHROMA, uiModeList[uiMode], uiPartOffset, uiDepthCU+uiInitTrDepth );
+#if PCC_RDO_EXT
+          xRecurIntraChromaCodingQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, uiDist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode), pcOccupancyYuv);
+#else
           xRecurIntraChromaCodingQT       ( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, uiDist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
-
+#endif
           if( pcCU->getSlice()->getPPS()->getUseTransformSkip() )
           {
             m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepthCU][CI_CURR_BEST] );
@@ -3026,7 +3085,11 @@ Void TEncSearch::IPCMSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcPre
 
 
 
-Void TEncSearch::xGetInterPredictionError( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, Distortion& ruiErr, Bool /*bHadamard*/ )
+Void TEncSearch::xGetInterPredictionError( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, Distortion& ruiErr, Bool /*bHadamard*/
+#if PCC_RDO_EXT
+    ,TComYuv* pcOcc
+#endif
+)
 {
   motionCompensation( pcCU, &m_tmpYuvPred, REF_PIC_LIST_X, iPartIdx );
 
@@ -3043,13 +3106,21 @@ Void TEncSearch::xGetInterPredictionError( TComDataCU* pcCU, TComYuv* pcYuvOrg,
   m_pcRdCost->setDistParam( cDistParam, pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA),
                             pcYuvOrg->getAddr( COMPONENT_Y, uiAbsPartIdx ), pcYuvOrg->getStride(COMPONENT_Y),
                             m_tmpYuvPred .getAddr( COMPONENT_Y, uiAbsPartIdx ), m_tmpYuvPred.getStride(COMPONENT_Y),
-                            iWidth, iHeight, m_pcEncCfg->getUseHADME() && (pcCU->getCUTransquantBypass(uiAbsPartIdx) == 0) );
+                            iWidth, iHeight, m_pcEncCfg->getUseHADME() && (pcCU->getCUTransquantBypass(uiAbsPartIdx) == 0)
+#if PCC_RDO_EXT
+                           ,pcOcc->getAddr( COMPONENT_Y, uiAbsPartIdx ), pcOcc->getStride(COMPONENT_Y)
+#endif
+                           );
 
   ruiErr = cDistParam.DistFunc( &cDistParam );
 }
 
 //! estimation of best merge coding
-Void TEncSearch::xMergeEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPUIdx, UInt& uiInterDir, TComMvField* pacMvField, UInt& uiMergeIndex, Distortion& ruiCost, TComMvField* cMvFieldNeighbours, UChar* uhInterDirNeighbours, Int& numValidMergeCand, Int iCostCalcType )
+Void TEncSearch::xMergeEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPUIdx, UInt& uiInterDir, TComMvField* pacMvField, UInt& uiMergeIndex, Distortion& ruiCost, TComMvField* cMvFieldNeighbours, UChar* uhInterDirNeighbours, Int& numValidMergeCand,
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
+                                  Int iCostCalcType)
 {
   UInt uiAbsPartIdx = 0;
   Int iWidth = 0;
@@ -3116,7 +3187,11 @@ Void TEncSearch::xMergeEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPUI
 
     if ( !iCostCalcType )
     {
-      xGetInterPredictionError( pcCU, pcYuvOrg, iPUIdx, uiCostCand, m_pcEncCfg->getUseHADME() );
+      xGetInterPredictionError( pcCU, pcYuvOrg, iPUIdx, uiCostCand, m_pcEncCfg->getUseHADME()
+#if PCC_RDO_EXT
+                                ,pcOccupancyYuv
+#endif
+                               );
     }
     else
     {
@@ -3191,11 +3266,20 @@ Void TEncSearch::xRestrictBipredMergeCand( TComDataCU* pcCU, UInt puIdx, TComMvF
 }
 
 //! search of the best candidate for inter prediction
+Bool TEncSearch::predInterSearch(TComDataCU* pcCU,
+                                TComYuv*    pcOrgYuv,
+                                TComYuv*    pcPredYuv,
+                                TComYuv*    pcResiYuv,
+                                TComYuv*    pcRecoYuv
+                                DEBUG_STRING_FN_DECLARE(sDebug),
+#if PCC_RDO_EXT
+                                TComYuv*    pcOccupancyYuv,
+#endif
+                                Bool        bUseRes
 #if AMP_MRG
-Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, TComYuv* pcRecoYuv DEBUG_STRING_FN_DECLARE(sDebug), Bool bUseRes, Bool bUseMRG, TComMv* iMVCandList )
-#else
-Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, TComYuv* pcRecoYuv, Bool bUseRes, TComMv* iMVCandList )
+                               ,Bool        bUseMRG
 #endif
+                              , TComMv*     iMVCandList )
 {
   for(UInt i=0; i<NUM_REF_PIC_LIST_01; i++)
   {
@@ -3314,7 +3398,11 @@ Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*
             uiBitsTemp--;
           }
         }
-        xEstimateMvPredAMVP( pcCU, pcOrgYuv, iPartIdx, eRefPicList, iRefIdxTemp, cMvPred[iRefList][iRefIdxTemp], false, &biPDistTemp);
+        xEstimateMvPredAMVP( pcCU, pcOrgYuv,
+#if PCC_RDO_EXT
+                            pcOccupancyYuv,
+#endif
+                            iPartIdx, eRefPicList, iRefIdxTemp, cMvPred[iRefList][iRefIdxTemp], false, &biPDistTemp);
         aaiMvpIdx[iRefList][iRefIdxTemp] = pcCU->getMVPIdx(eRefPicList, uiPartAddr);
         aaiMvpNum[iRefList][iRefIdxTemp] = pcCU->getMVPNum(eRefPicList, uiPartAddr);
 
@@ -3343,12 +3431,20 @@ Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*
           }
           else
           {
-            xMotionEstimation ( pcCU, pcOrgYuv, iPartIdx, eRefPicList, &cMvPred[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp );
+            xMotionEstimation ( pcCU, pcOrgYuv,
+#if PCC_RDO_EXT
+                               pcOccupancyYuv,
+#endif
+                               iPartIdx, eRefPicList, &cMvPred[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp );
           }
         }
         else
         {
-          xMotionEstimation ( pcCU, pcOrgYuv, iPartIdx, eRefPicList, &cMvPred[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp );
+          xMotionEstimation ( pcCU, pcOrgYuv,
+#if PCC_RDO_EXT
+                               pcOccupancyYuv,
+#endif
+                             iPartIdx, eRefPicList, &cMvPred[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp );
         }
         xCopyAMVPInfo(pcCU->getCUMvField(eRefPicList)->getAMVPInfo(), &aacAMVPInfo[iRefList][iRefIdxTemp]); // must always be done ( also when AMVP_MODE = AM_NONE )
         xCheckBestMVP(pcCU, eRefPicList, cMvTemp[iRefList][iRefIdxTemp], cMvPred[iRefList][iRefIdxTemp], aaiMvpIdx[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp);
@@ -3505,7 +3601,11 @@ Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*
           }
           uiBitsTemp += m_auiMVPIdxCost[aaiMvpIdxBi[iRefList][iRefIdxTemp]][AMVP_MAX_NUM_CANDS];
           // call ME
-          xMotionEstimation ( pcCU, pcOrgYuv, iPartIdx, eRefPicList, &cMvPredBi[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp, true );
+          xMotionEstimation ( pcCU, pcOrgYuv,
+#if PCC_RDO_EXT
+                               pcOccupancyYuv,
+#endif
+                             iPartIdx, eRefPicList, &cMvPredBi[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp, true );
 
           xCopyAMVPInfo(&aacAMVPInfo[iRefList][iRefIdxTemp], pcCU->getCUMvField(eRefPicList)->getAMVPInfo());
           xCheckBestMVP(pcCU, eRefPicList, cMvTemp[iRefList][iRefIdxTemp], cMvPredBi[iRefList][iRefIdxTemp], aaiMvpIdxBi[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp);
@@ -3682,7 +3782,11 @@ Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*
 
       if (bTestNormalMC)
       {
-        xGetInterPredictionError( pcCU, pcOrgYuv, iPartIdx, uiMEError, m_pcEncCfg->getUseHADME() );
+        xGetInterPredictionError( pcCU, pcOrgYuv, iPartIdx, uiMEError, m_pcEncCfg->getUseHADME()
+#if PCC_RDO_EXT
+                                 , pcOccupancyYuv
+#endif
+                                 );
         uiMECost = uiMEError + m_pcRdCost->getCost( uiMEBits );
       }
 #else
@@ -3699,7 +3803,11 @@ Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*
       // find Merge result
       Distortion uiMRGCost = std::numeric_limits<Distortion>::max();
       pcCU->setMergeFlagSubParts( true, uiPartAddr, iPartIdx, pcCU->getDepth( uiPartAddr ) );
-      xMergeEstimation( pcCU, pcOrgYuv, iPartIdx, uiMRGInterDir, cMRGMvField, uiMRGIndex, uiMRGCost, cMvFieldNeighbours, uhInterDirNeighbours, numValidMergeCand);
+      xMergeEstimation( pcCU, pcOrgYuv, iPartIdx, uiMRGInterDir, cMRGMvField, uiMRGIndex, uiMRGCost, cMvFieldNeighbours, uhInterDirNeighbours, numValidMergeCand
+#if PCC_RDO_EXT
+                                  ,pcOccupancyYuv
+#endif
+);
 
       if ( uiMRGCost < uiMECost )
       {
@@ -3752,7 +3860,11 @@ Bool TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*
 
 
 // AMVP
-Void TEncSearch::xEstimateMvPredAMVP( TComDataCU* pcCU, TComYuv* pcOrgYuv, UInt uiPartIdx, RefPicList eRefPicList, Int iRefIdx, TComMv& rcMvPred, Bool bFilled, Distortion* puiDistBiP )
+Void TEncSearch::xEstimateMvPredAMVP( TComDataCU* pcCU, TComYuv* pcOrgYuv,
+#if PCC_RDO_EXT
+                            TComYuv* pcOccupancyYuv,
+#endif
+                                     UInt uiPartIdx, RefPicList eRefPicList, Int iRefIdx, TComMv& rcMvPred, Bool bFilled, Distortion* puiDistBiP )
 {
   AMVPInfo*  pcAMVPInfo = pcCU->getCUMvField(eRefPicList)->getAMVPInfo();
 
@@ -3804,7 +3916,11 @@ Void TEncSearch::xEstimateMvPredAMVP( TComDataCU* pcCU, TComYuv* pcOrgYuv, UInt
 
     if(pcCU->getSlice()->getMvdL1ZeroFlag() && eRefPicList==REF_PIC_LIST_1)
     {
-      (*puiDistBiP) = xGetTemplateCost( pcCU, uiPartAddr, pcOrgYuv, &m_cYuvPredTemp, rcMvPred, 0, AMVP_MAX_NUM_CANDS, eRefPicList, iRefIdx, iRoiWidth, iRoiHeight);
+      (*puiDistBiP) = xGetTemplateCost( pcCU, uiPartAddr, pcOrgYuv, &m_cYuvPredTemp, rcMvPred, 0, AMVP_MAX_NUM_CANDS, eRefPicList, iRefIdx, iRoiWidth, iRoiHeight
+#if PCC_RDO_EXT
+    ,pcOccupancyYuv
+#endif
+                                       );
     }
     return;
   }
@@ -3821,7 +3937,11 @@ Void TEncSearch::xEstimateMvPredAMVP( TComDataCU* pcCU, TComYuv* pcOrgYuv, UInt
   for ( i = minMVPCand ; i < maxMVPCand; i++)
   {
     Distortion uiTmpCost;
-    uiTmpCost = xGetTemplateCost( pcCU, uiPartAddr, pcOrgYuv, &m_cYuvPredTemp, pcAMVPInfo->m_acMvCand[i], i, AMVP_MAX_NUM_CANDS, eRefPicList, iRefIdx, iRoiWidth, iRoiHeight);
+    uiTmpCost = xGetTemplateCost( pcCU, uiPartAddr, pcOrgYuv, &m_cYuvPredTemp, pcAMVPInfo->m_acMvCand[i], i, AMVP_MAX_NUM_CANDS, eRefPicList, iRefIdx, iRoiWidth, iRoiHeight
+#if PCC_RDO_EXT
+    ,pcOccupancyYuv
+#endif
+                                 );
     if ( uiBestCost > uiTmpCost )
     {
       uiBestCost = uiTmpCost;
@@ -4002,7 +4122,10 @@ Distortion TEncSearch::xGetTemplateCost( TComDataCU* pcCU,
                                          RefPicList  eRefPicList,
                                          Int         iRefIdx,
                                          Int         iSizeX,
-                                         Int         iSizeY
+                                         Int         iSizeY,
+#if PCC_RDO_EXT
+                                        TComYuv* pcOccupancy
+#endif
                                          )
 {
   Distortion uiCost = std::numeric_limits<Distortion>::max();
@@ -4028,13 +4151,21 @@ Distortion TEncSearch::xGetTemplateCost( TComDataCU* pcCU,
 
   // calc distortion
 
-  uiCost = m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA), pcTemplateCand->getAddr(COMPONENT_Y, uiPartAddr), pcTemplateCand->getStride(COMPONENT_Y), pcOrgYuv->getAddr(COMPONENT_Y, uiPartAddr), pcOrgYuv->getStride(COMPONENT_Y), iSizeX, iSizeY, COMPONENT_Y, DF_SAD );
+  uiCost = m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA), pcTemplateCand->getAddr(COMPONENT_Y, uiPartAddr), pcTemplateCand->getStride(COMPONENT_Y), pcOrgYuv->getAddr(COMPONENT_Y, uiPartAddr), pcOrgYuv->getStride(COMPONENT_Y), iSizeX, iSizeY, COMPONENT_Y, DF_SAD
+#if PCC_RDO_EXT
+    ,pcOccupancy->getAddr(COMPONENT_Y, uiPartAddr), pcOccupancy->getStride(COMPONENT_Y)
+#endif
+                                   );
   uiCost = (UInt) m_pcRdCost->calcRdCost( m_auiMVPIdxCost[iMVPIdx][iMVPNum], uiCost, DF_SAD );
   return uiCost;
 }
 
 
-Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, RefPicList eRefPicList, TComMv* pcMvPred, Int iRefIdxPred, TComMv& rcMv, UInt& ruiBits, Distortion& ruiCost, Bool bBi  )
+Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg,
+#if PCC_RDO_EXT
+                                   TComYuv* pcOccupancyYuv,
+#endif
+                                   Int iPartIdx, RefPicList eRefPicList, TComMv* pcMvPred, Int iRefIdxPred, TComMv& rcMv, UInt& ruiBits, Distortion& ruiCost, Bool bBi  )
 {
   UInt          uiPartAddr;
   Int           iRoiWidth;
@@ -4102,6 +4233,11 @@ Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPa
   Pel*        piRefY      = pcCU->getSlice()->getRefPic( eRefPicList, iRefIdxPred )->getPicYuvRec()->getAddr( COMPONENT_Y, pcCU->getCtuRsAddr(), pcCU->getZorderIdxInCtu() + uiPartAddr );
   Int         iRefStride  = pcCU->getSlice()->getRefPic( eRefPicList, iRefIdxPred )->getPicYuvRec()->getStride(COMPONENT_Y);
 
+#if PCC_RDO_EXT
+  Pel* piOccupancy = pcOccupancyYuv->getAddr(COMPONENT_Y, uiPartAddr);
+  Int iStrideOccupancy = pcOccupancyYuv->getStride(COMPONENT_Y);
+#endif
+  
   TComMv      cMvPred = *pcMvPred;
 
   if ( bBi )
@@ -4140,7 +4276,12 @@ Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPa
   //  Do integer search
   if ( (m_motionEstimationSearchMethod==MESEARCH_FULL) || bBi )
   {
-    xPatternSearch      ( &cPattern, piRefY, iRefStride, &cMvSrchRngLT, &cMvSrchRngRB, rcMv, ruiCost );
+    xPatternSearch      ( &cPattern, piRefY, iRefStride,
+#if PCC_RDO_EXT
+                          pcOccupancyYuv,
+#endif
+                         &cMvSrchRngLT, &cMvSrchRngRB, rcMv, ruiCost
+                         );
   }
   else
   {
@@ -4150,7 +4291,11 @@ Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPa
     {
       pIntegerMv2Nx2NPred = &(m_integerMv2Nx2N[eRefPicList][iRefIdxPred]);
     }
-    xPatternSearchFast  ( pcCU, &cPattern, piRefY, iRefStride, &cMvSrchRngLT, &cMvSrchRngRB, rcMv, ruiCost, pIntegerMv2Nx2NPred );
+    xPatternSearchFast  ( pcCU, &cPattern, piRefY, iRefStride,
+#if PCC_RDO_EXT
+                         piOccupancy, iStrideOccupancy,
+#endif
+                         &cMvSrchRngLT, &cMvSrchRngRB, rcMv, ruiCost, pIntegerMv2Nx2NPred );
     if (pcCU->getPartitionSize(0) == SIZE_2Nx2N)
     {
       m_integerMv2Nx2N[eRefPicList][iRefIdxPred] = rcMv;
@@ -4257,6 +4402,9 @@ Void TEncSearch::xSetSearchRange ( const TComDataCU* const pcCU, const TComMv& c
 Void TEncSearch::xPatternSearch( const TComPattern* const pcPatternKey,
                                  const Pel*               piRefY,
                                  const Int                iRefStride,
+#if PCC_RDO_EXT
+                                 TComYuv* pcOccupancyYuv,
+#endif
                                  const TComMv* const      pcMvSrchRngLT,
                                  const TComMv* const      pcMvSrchRngRB,
                                  TComMv&      rcMv,
@@ -4272,6 +4420,10 @@ Void TEncSearch::xPatternSearch( const TComPattern* const pcPatternKey,
   Int         iBestX = 0;
   Int         iBestY = 0;
 
+#if PCC_RDO_EXT
+  m_cDistParam.pOccupancy =pcOccupancyYuv->getAddr(COMPONENT_Y);
+  m_cDistParam.iStrideOccupancy = pcOccupancyYuv->getStride(COMPONENT_Y);
+#endif
   //-- jclee for using the SAD function pointer
   m_pcRdCost->setDistParam( pcPatternKey, piRefY, iRefStride,  m_cDistParam );
 
@@ -4322,6 +4474,10 @@ Void TEncSearch::xPatternSearchFast( const TComDataCU* const  pcCU,
                                      const TComPattern* const pcPatternKey,
                                      const Pel* const         piRefY,
                                      const Int                iRefStride,
+#if PCC_RDO_EXT
+                                    const Pel* piOccupancy,
+                                    Int iOccupancyStride,
+#endif
                                      const TComMv* const      pcMvSrchRngLT,
                                      const TComMv* const      pcMvSrchRngRB,
                                      TComMv&                  rcMv,
@@ -4334,11 +4490,16 @@ Void TEncSearch::xPatternSearchFast( const TComDataCU* const  pcCU,
   pcCU->getMvPredAbove      ( m_acMvPredictors[MD_ABOVE] );
   assert (MD_ABOVE_RIGHT < NUM_MV_PREDICTORS);
   pcCU->getMvPredAboveRight ( m_acMvPredictors[MD_ABOVE_RIGHT] );
-
+  
+#if PCC_RDO_EXT
+  m_cDistParam.iStrideOccupancy = iOccupancyStride;
+  m_cDistParam.pOccupancy = piOccupancy;
+#endif
+  
   switch ( m_motionEstimationSearchMethod )
   {
     case MESEARCH_DIAMOND:
-      xTZSearch( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred, false );
+      xTZSearch( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred, false, piOccupancy, iOccupancyStride );
       break;
 
     case MESEARCH_SELECTIVE:
@@ -4346,7 +4507,7 @@ Void TEncSearch::xPatternSearchFast( const TComDataCU* const  pcCU,
       break;
 
     case MESEARCH_DIAMOND_ENHANCED:
-      xTZSearch( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred, true );
+      xTZSearch( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred, true, piOccupancy, iOccupancyStride );
       break;
 
     case MESEARCH_FULL: // shouldn't get here.
@@ -4365,7 +4526,11 @@ Void TEncSearch::xTZSearch( const TComDataCU* const pcCU,
                             TComMv&                  rcMv,
                             Distortion&              ruiSAD,
                             const TComMv* const      pIntegerMv2Nx2NPred,
-                            const Bool               bExtendedSettings)
+                            const Bool               bExtendedSettings
+#if PCC_RDO_EXT
+                            , const Pel* piOccupancy, Int iOccupancyStride
+#endif
+                           )
 {
   const Bool bUseAdaptiveRaster                      = bExtendedSettings;
   const Int  iRaster                                 = 5;
@@ -4402,6 +4567,10 @@ Void TEncSearch::xTZSearch( const TComDataCU* const pcCU,
   cStruct.piRefY      = piRefY;
   cStruct.uiBestSad   = MAX_UINT;
 
+#if PCC_RDO_EXT
+  m_cDistParam.pOccupancy = piOccupancy;
+  m_cDistParam.iStrideOccupancy = iOccupancyStride;
+#endif
   // set rcMv (Median predictor) as start point and as best point
   xTZSearchHelp( pcPatternKey, cStruct, rcMv.getHor(), rcMv.getVer(), 0, 0 );
 
@@ -5063,7 +5232,12 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
                                             Bool bSkipResidual,
                                             TComYuv* pcYuvNoCorrResi,
                                             ACTRDTestTypes eACTRDTestType
+#if PCC_RDO_EXT
+                                            DEBUG_STRING_FN_DECLARE(sDebug),
+                                            TComYuv* pcYuvOccupancy )
+#else
                                             DEBUG_STRING_FN_DECLARE(sDebug) )
+#endif
 {
   assert ( !pcCU->isIntra(0) );
 
@@ -5091,8 +5265,13 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
       const ComponentID compID=ComponentID(comp);
       const UInt csx=pcYuvOrg->getComponentScaleX(compID);
       const UInt csy=pcYuvOrg->getComponentScaleY(compID);
+#if PCC_RDO_EXT
+      distortion += m_pcRdCost->getDistPart(sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID),
+                                            pcYuvOrg->getStride(compID), cuWidthPixels >> csx, cuHeightPixels >> csy, compID, DF_SSE, pcYuvOccupancy->getAddr(compID), pcYuvOccupancy->getStride(compID));
+#else
       distortion += m_pcRdCost->getDistPart( sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID),
                                                pcYuvOrg->getStride(compID), cuWidthPixels >> csx, cuHeightPixels >> csy, compID);
+#endif
     }
 
     m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[pcCU->getDepth(0)][CI_CURR_BEST]);
@@ -5141,11 +5320,24 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
     {
       const UInt uiNumSamplesLuma = cuWidthPixels*cuHeightPixels;
       ::memset( m_pTempPel, 0, sizeof( Pel ) * uiNumSamplesLuma );
-      zeroDistortion = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_pTempPel, cuWidthPixels, pcYuvResi->getAddr( COMPONENT_Y, 0 ), pcYuvResi->getStride(COMPONENT_Y), cuWidthPixels, cuHeightPixels, COMPONENT_Y ); // initialized with zero residual destortion
+      zeroDistortion = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_pTempPel, cuWidthPixels, pcYuvResi->getAddr( COMPONENT_Y, 0 ), pcYuvResi->getStride(COMPONENT_Y), cuWidthPixels, cuHeightPixels, COMPONENT_Y
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcYuvOccupancy->getAddr(COMPONENT_Y), pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                                               
+                                               ); // initialized with zero residual destortion
       const UInt csx=pcYuvOrg->getComponentScaleX(COMPONENT_Cb);
       const UInt csy=pcYuvOrg->getComponentScaleY(COMPONENT_Cb);
-      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cb, 0 ), pcYuvResi->getStride(COMPONENT_Cb), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cb ); // initialized with zero residual destortion
-      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cr, 0 ), pcYuvResi->getStride(COMPONENT_Cr), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cr ); // initialized with zero residual destortion
+      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cb, 0 ), pcYuvResi->getStride(COMPONENT_Cb), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cb
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcYuvOccupancy->getAddr(COMPONENT_Cb), pcYuvOccupancy->getStride(COMPONENT_Cb)
+#endif
+                                                ); // initialized with zero residual destortion
+      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cr, 0 ), pcYuvResi->getStride(COMPONENT_Cr), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cr
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcYuvOccupancy->getAddr(COMPONENT_Cr), pcYuvOccupancy->getStride(COMPONENT_Cr)
+#endif
+                                                ); // initialized with zero residual destortion
     }
     if(eACTRDTestType == ACT_TRAN_CLR)
     {
@@ -5163,23 +5355,40 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
   {
     if(eACTRDTestType == ACT_TWO_CLR)
     {
-      xEstimateInterResidualQTTUCSC( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, tuLevel0, pcYuvResi, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug) );
+      xEstimateInterResidualQTTUCSC( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, tuLevel0, pcYuvResi, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                    , pcYuvOccupancy
+#endif
+                                    );
     }
     else if(eACTRDTestType == ACT_TRAN_CLR)
     {
       pcCU->setColourTransformSubParts(true, 0 , pcCU->getDepth(0));
-      xEstimateInterResidualQT( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, NULL, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug), pcYuvResi );
+      xEstimateInterResidualQT( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, NULL, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug), pcYuvResi
+#if PCC_RDO_EXT
+                                    , pcYuvOccupancy
+#endif
+                               );
     }
     else
     {
       pcCU->setColourTransformSubParts(false, 0, pcCU->getDepth(0));
-      xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug) );
+      xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                    , NULL
+                                    , pcYuvOccupancy
+#endif
+                               );
     }
   }
   else
   {
     pcCU->setColourTransformSubParts(false, 0, pcCU->getDepth(0));
+#if PCC_RDO_EXT
+    xEstimateInterResidualQT(pcYuvResi, nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug), NULL, pcYuvOccupancy);
+#else
     xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug) );
+#endif
   }
 
   // -------------------------------------------------------
@@ -5248,7 +5457,11 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
   for(Int comp=0; comp<numValidComponents; comp++)
   {
     const ComponentID compID=ComponentID(comp);
+#if PCC_RDO_EXT
+    finalDistortion += m_pcRdCost->getDistPart(sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID), pcYuvOrg->getStride(compID), cuWidthPixels >> pcYuvOrg->getComponentScaleX(compID), cuHeightPixels >> pcYuvOrg->getComponentScaleY(compID), compID, DF_SSE, pcYuvOccupancy->getAddr(compID), pcYuvOccupancy->getStride(compID));
+#else
     finalDistortion += m_pcRdCost->getDistPart( sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID ), pcYuvRec->getStride(compID ), pcYuvOrg->getAddr(compID ), pcYuvOrg->getStride(compID), cuWidthPixels >> pcYuvOrg->getComponentScaleX(compID), cuHeightPixels >> pcYuvOrg->getComponentScaleY(compID), compID);
+#endif
   }
 
   pcCU->getTotalBits()       = finalBits;
@@ -5266,6 +5479,9 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
                                            TComTU     &rTu
                                            DEBUG_STRING_FN_DECLARE(sDebug),
                                            TComYuv* pcOrgResi
+#if PCC_RDO_EXT
+                                         , TComYuv* pcOccupancyYuv
+#endif
                                           )
 {
   TComDataCU *pcCU        = rTu.getCU();
@@ -5518,12 +5734,21 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
 
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride( compID ), pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                              , DF_SSE, pcOccupancyYuv->getAddr(compID), pcOccupancyYuv->getStride(compID)
+#endif
+                                                         ); // initialized with zero residual distortion
                 }
                 else
                 {
+#if PCC_RDO_EXT
+                  nonCoeffDist = m_pcRdCost->getDistPart(channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                    pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID, DF_SSE, pcOccupancyYuv->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0), pcOccupancyYuv->getStride(compID)); // initialized with zero residual distortion
+#else
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+#endif
                 }
 
                 m_pcEntropyCoder->encodeQtCbfZero( TUIterator, toChannelType(compID) );
@@ -5580,13 +5805,19 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
                                                         m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID     ),
                                                         true);
                 }
-
+#if PCC_RDO_EXT
+                currCompDist = m_pcRdCost->getDistPart(channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                  m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
+                  pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                  pcResi->getStride(compID),
+                  tuCompRect.width, tuCompRect.height, compID, DF_SSE, pcOccupancyYuv->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0), pcOccupancyYuv->getStride(compID));
+#else
                 currCompDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                         m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
                                                         pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                         pcResi->getStride(compID),
                                                         tuCompRect.width, tuCompRect.height, compID);
-
+#endif
                 currCompCost = m_pcRdCost->calcRdCost(currCompBits, currCompDist);
                   
                 if (pcCU->isLosslessCoded(0))
@@ -5713,14 +5944,26 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
         m_tmpYuvPred.convert( extendedPrecision, rTu.getRect(COMPONENT_Y).x0, rTu.getRect(COMPONENT_Y).y0, rTu.getRect(COMPONENT_Y).width, false, pcCU->getSlice()->getSPS()->getBitDepths(), pcCU->isLosslessCoded(uiAbsPartIdx) );
 
         uiSingleDistComp[COMPONENT_Y ][0] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_tmpYuvPred.getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), m_tmpYuvPred.getStride(COMPONENT_Y),
-          pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y );
+          pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Y), pcOccupancyYuv->getStride(COMPONENT_Y)
+#endif
+                                                                    );
 
         const TComRectangle &tuCompRectC=rTu.getRect(COMPONENT_Cb);
         uiSingleDistComp[COMPONENT_Cb][0] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_tmpYuvPred.getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), m_tmpYuvPred.getStride(COMPONENT_Cb),
-          pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb );
+          pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cb), pcOccupancyYuv->getStride(COMPONENT_Cb)
+#endif
+                                                                    );
 
         uiSingleDistComp[COMPONENT_Cr][0] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_tmpYuvPred.getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), m_tmpYuvPred.getStride(COMPONENT_Cr),
-          pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr );
+          pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                                    );
 
         uiSingleDistComp[COMPONENT_Y][1] = uiSingleDistComp[COMPONENT_Cb][1] = uiSingleDistComp[COMPONENT_Cr][1] = 0;
       }
@@ -5827,7 +6070,11 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
     do
     {
       DEBUG_STRING_NEW(childString)
+#if PCC_RDO_EXT
+        xEstimateInterResidualQT(pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, bCheckFull ? NULL : puiZeroDist, tuRecurseChild DEBUG_STRING_PASS_INTO(childString), pcOrgResi, pcOccupancyYuv);
+#else
       xEstimateInterResidualQT( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, bCheckFull ? NULL : puiZeroDist,  tuRecurseChild DEBUG_STRING_PASS_INTO(childString), pcOrgResi );
+#endif
 #if DEBUG_STRING
       // split the string by component and append to the relevant output (because decoder decodes in channel order, whereas this search searches by TU-order)
       std::size_t lastPos=0;
@@ -6666,7 +6913,11 @@ TEncSearch::xIntraCodingTUBlockCSC(       TComYuv*    pcResiYuv,
 
 
 Void
-TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize, ACTRDTestTypes eACTRDTestType DEBUG_STRING_FN_DECLARE(sDebug) )
+TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize, ACTRDTestTypes eACTRDTestType DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                    , TComYuv* pcYuvOccupancy
+#endif
+                                     )
 {
   TComDataCU          *pcCU                 = rTu.getCU();
   const UInt          trDepth               = rTu.GetTransformDepthRel();
@@ -6919,7 +7170,14 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
                                                         pcResiYuv->getStride(compID),
                                                         rTu.getRect(compID).width,
                                                         rTu.getRect(compID).height,
-                                                        compID);
+                                                        compID
+#if PCC_RDO_EXT
+                                                        , DF_SSE
+                                                        , pcYuvOccupancy->getAddr(compID)
+                                                        , pcYuvOccupancy->getStride(compID)
+#endif
+                                                      
+                                                      );
               dSingleCostTmp = m_pcRdCost->calcRdCost( singleBitsTmp, singleDistTmp );
             }
 
@@ -7001,7 +7259,13 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
                                                                                        pcOrgYuv->getStride(COMPONENT_Y),
                                                                                        rTu.getRect(COMPONENT_Y).width,
                                                                                        rTu.getRect(COMPONENT_Y).height,
-                                                                                       COMPONENT_Y);
+                                                                                       COMPONENT_Y
+#if PCC_RDO_EXT
+                                                                                     , DF_SSE
+                                                                                     , pcYuvOccupancy->getAddr(COMPONENT_Y)
+                                                                                     , pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                                                                                      );
       singleColorSpaceDist[colorSpaceId][CHANNEL_TYPE_CHROMA] = 0;
       for(UInt ch = COMPONENT_Cb; ch < numberValidComponents; ch++)
       {
@@ -7013,7 +7277,13 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
                                                                                             pcOrgYuv->getStride(compID),
                                                                                             rTu.getRect(compID).width,
                                                                                             rTu.getRect(compID).height,
-                                                                                            compID);
+                                                                                            compID
+#if PCC_RDO_EXT
+                                                                                     , DF_SSE
+                                                                                     , pcYuvOccupancy->getAddr(compID)
+                                                                                     , pcYuvOccupancy->getStride(compID)
+#endif
+                                                                                           );
       }
 
       dSingleColorSpaceCost[colorSpaceId] = m_pcRdCost->calcRdCost( singleColorSpaceBits[colorSpaceId], singleColorSpaceDist[colorSpaceId][CHANNEL_TYPE_LUMA] + singleColorSpaceDist[colorSpaceId][CHANNEL_TYPE_CHROMA] );
@@ -7132,7 +7402,11 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
     TComTURecurse tuRecurseChild(rTu, false);
     do
     {
-      xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug) );
+      xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                               );
 
       for(UInt ch = 0; ch < numberValidComponents; ch++)
       {
@@ -7211,7 +7485,11 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
 }
 
 Void
-TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize DEBUG_STRING_FN_DECLARE(sDebug) )
+TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                  , TComYuv* pcYuvOccupancy
+#endif
+                                   )
 {
   TComDataCU          *pcCU                 = rTu.getCU();
   const UInt          trDepth               = rTu.GetTransformDepthRel();
@@ -7423,7 +7701,13 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
                                                      pcResiYuv->getStride( compID ),
                                                      rTu.getRect( compID ).width,
                                                      rTu.getRect( compID ).height,
-                                                     compID );
+                                                     compID
+#if PCC_RDO_EXT
+                                                    , DF_SSE
+                                                    , pcYuvOccupancy->getAddr(compID)
+                                                    , pcYuvOccupancy->getStride(compID)
+#endif
+                                                    );
             dSingleCostTmp = m_pcRdCost->calcRdCost( singleBitsTmp, singleDistTmp );
           }
 
@@ -7508,7 +7792,13 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
                                                              pcOrgYuv->getStride(COMPONENT_Y),
                                                              rTu.getRect(COMPONENT_Y).width,
                                                              rTu.getRect(COMPONENT_Y).height,
-                                                             COMPONENT_Y);
+                                                             COMPONENT_Y
+#if PCC_RDO_EXT
+                                                           , DF_SSE
+                                                           , pcYuvOccupancy->getAddr(COMPONENT_Y)
+                                                           , pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                                                            );
     singleDist[CHANNEL_TYPE_CHROMA] = 0;
     for(UInt ch = COMPONENT_Cb; ch < numberValidComponents; ch++)
     {
@@ -7520,7 +7810,14 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
                                                                   pcOrgYuv->getStride(compID),
                                                                   rTu.getRect(compID).width,
                                                                   rTu.getRect(compID).height,
-                                                                  compID);
+                                                                  compID
+#if PCC_RDO_EXT
+                                                           , DF_SSE
+                                                           , pcYuvOccupancy->getAddr(compID)
+                                                           , pcYuvOccupancy->getStride(compID)
+#endif
+                                                                 
+                                                                 );
     }
 
     dSingleCost = m_pcRdCost->calcRdCost( singleBits, singleDist[CHANNEL_TYPE_LUMA] + singleDist[CHANNEL_TYPE_CHROMA] );
@@ -7546,7 +7843,11 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
     TComTURecurse tuRecurseChild(rTu, false);
     do
     {
-      xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize DEBUG_STRING_PASS_INTO(sDebug) );
+      xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                                    , pcYuvOccupancy
+#endif
+                             );
 
       for(UInt ch = 0; ch < numberValidComponents; ch++)
       {
@@ -7631,6 +7932,9 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
                               ACTRDTestTypes eACTRDTestType,
                               Bool           bReuseIntraMode
                               DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                              ,TComYuv*      pcYuvOccupancy
+#endif
                              )
 {
   const UInt         depth                 = pcCU->getDepth(0);
@@ -7702,7 +8006,11 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
     {
       DistParam distParam;
       const Bool bUseHadamard=pcCU->getCUTransquantBypass(0) == 0;
-      m_pcRdCost->setDistParam(distParam, sps.getBitDepth(CHANNEL_TYPE_LUMA), piOrg, stride, piPred, stride, puRect.width, puRect.height, bUseHadamard);
+      m_pcRdCost->setDistParam(distParam, sps.getBitDepth(CHANNEL_TYPE_LUMA), piOrg, stride, piPred, stride, puRect.width, puRect.height, bUseHadamard
+#if PCC_RDO_EXT
+                               , pcYuvOccupancy->getAddr(COMPONENT_Y, partOffset), pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                               );
       distParam.bApplyWeight = false;
       for( Int modeIdx = 0; modeIdx < numModesAvailable; modeIdx++ )
       {
@@ -7766,16 +8074,28 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
 
       if(eACTRDTestType == ACT_TWO_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)  );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else if(eACTRDTestType == ACT_TRAN_CLR)
       {
         pcCU->setColourTransformSubParts(true, 0, depth);
-        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true DEBUG_STRING_PASS_INTO(sMode)  );
+        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                               );
       }
       else if(eACTRDTestType == ACT_ORG_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)  );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else
       {
@@ -7818,16 +8138,28 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
       m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[depth][CI_CURR_BEST] );
       if(eACTRDTestType == ACT_TWO_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode) );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else if(eACTRDTestType == ACT_TRAN_CLR)
       {
         pcCU->setColourTransformSubParts(true, 0, depth);
-        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false DEBUG_STRING_PASS_INTO(sMode) );
+        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                               );
       }
       else if(eACTRDTestType == ACT_ORG_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode) );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else
       {
@@ -7934,6 +8266,9 @@ TEncSearch::estIntraPredLumaQTWithModeReuse(TComDataCU* pcCU,
                                             TComYuv*    pcResiYuv,
                                             TComYuv*    pcRecoYuv,
                                             Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                          , TComYuv* pcOccupancyYuv
+#endif
                                            )
 {
   const UInt         depth               = pcCU->getDepth(0);
@@ -7976,7 +8311,11 @@ TEncSearch::estIntraPredLumaQTWithModeReuse(TComDataCU* pcCU,
     // set context models
     m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[depth][CI_CURR_BEST] );
 
-    xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, bestPUDistY, true, dBestPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
+    xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, bestPUDistY, true, dBestPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                              , pcOccupancyYuv
+#endif
+                            );
     xSetIntraResultLumaQT( pcRecoYuv, tuRecurseWithPU );
 
     if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
@@ -8059,6 +8398,9 @@ TEncSearch::estIntraPredChromaQTWithModeReuse(TComDataCU* pcCU,
                                               TComYuv*    pcResiYuv,
                                               TComYuv*    pcRecoYuv,
                                               Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                             ,TComYuv*      pcYuvOccupancy
+#endif
                                              )
 {
   const UInt    initTrDepth  = pcCU->getPartitionSize(0) != SIZE_2Nx2N && enable4ChromaPUsInIntraNxNCU(pcOrgYuv->getChromaFormat()) ? 1 : 0;
@@ -8084,7 +8426,11 @@ TEncSearch::estIntraPredChromaQTWithModeReuse(TComDataCU* pcCU,
       DEBUG_STRING_NEW(sMode)
       //----- chroma coding -----
       Distortion dist = 0;
-      xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, dist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
+      xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, dist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                  , pcYuvOccupancy
+#endif
+                                );
 
       xSetIntraResultChromaQT( pcRecoYuv, tuRecurseWithPU );
 
@@ -8139,7 +8485,11 @@ TEncSearch::estIntraPredChromaQTWithModeReuse(TComDataCU* pcCU,
   m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[depthCU][CI_CURR_BEST] );
 }
 
-UInt TEncSearch::paletteSearch(TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSizeCurrIter)
+UInt TEncSearch::paletteSearch(TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSizeCurrIter
+#if PCC_RDO_EXT
+    , TComYuv* pcYuvOccupancy
+#endif
+                               )
 {
   UInt  depth      = pcCU->getDepth(0);
   Distortion  distortion = 0;
@@ -8423,7 +8773,11 @@ UInt TEncSearch::paletteSearch(TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rp
 
     Pel *pOrig = pcOrgYuv->getAddr(compID, 0);
     Pel *pReco = rpcRecoYuv->getAddr(compID, 0);
+#if PCC_RDO_EXT
+    distortion += m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(chType), pReco, stride, pOrig, stride, width, height, compID , DF_SSE, pcYuvOccupancy->getAddr(compID), pcYuvOccupancy->getStride(compID));
+#else
     distortion += m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(chType), pReco, stride, pOrig, stride, width, height, compID );
+#endif
   }
 
   Double dCost = m_pcRdCost->calcRdCost( bits, distortion );
@@ -9742,6 +10096,9 @@ Bool TEncSearch::predIntraBCSearch( TComDataCU * pcCU,
                                     Bool         bUse1DSearchFor8x8,
                                     Bool         bUseRes,
                                     Bool         testOnlyPred
+#if PCC_RDO_EXT
+                                   , TComYuv* pcOccupancyYuv
+#endif
                                     )
 {
   rpcPredYuv->clear();
@@ -9775,7 +10132,11 @@ Bool TEncSearch::predIntraBCSearch( TComDataCU * pcCU,
     cMvPred[0].set( currAMVPInfo.m_acMvCand[0].getHor() >> 2, currAMVPInfo.m_acMvCand[0].getVer() >> 2);
     cMvPred[1].set( currAMVPInfo.m_acMvCand[1].getHor() >> 2, currAMVPInfo.m_acMvCand[1].getVer() >> 2);
 
-    xIntraBlockCopyEstimation ( pcCU, pcOrgYuv, partIdx, cMvPred, cMv, cost, bUse1DSearchFor8x8, testOnlyPred );
+    xIntraBlockCopyEstimation ( pcCU, pcOrgYuv, partIdx, cMvPred, cMv, cost, bUse1DSearchFor8x8, testOnlyPred
+#if PCC_RDO_EXT
+                                 , pcOccupancyYuv
+#endif
+                               );
 
     if( m_pcEncCfg->getUseHashBasedIntraBCSearch()
       && pcCU->getWidth(0) == 8
@@ -9786,7 +10147,11 @@ Bool TEncSearch::predIntraBCSearch( TComDataCU * pcCU,
       )
     {
       Distortion intraBCECost = cost;
-      xIntraBCHashSearch ( pcCU, pcOrgYuv, partIdx, cMvPred, cMv, (UInt)intraBCECost);
+      xIntraBCHashSearch ( pcCU, pcOrgYuv, partIdx, cMvPred, cMv, (UInt)intraBCECost
+#if PCC_RDO_EXT
+                           , pcOccupancyYuv
+#endif
+                          );
       cost = std::min(intraBCECost, cost);
     }
     totalCost += cost;
@@ -10037,6 +10402,9 @@ Bool TEncSearch::predMixedIntraBCInterSearch( TComDataCU * pcCU,
                                               DEBUG_STRING_FN_DECLARE( sDebug ),
                                               TComMv*      iMvCandList,
                                               Bool         bUseRes
+#if PCC_RDO_EXT
+                                             ,TComYuv* pcOccupancyYuv
+#endif
                                               )
 {
   rpcPredYuv->clear();
@@ -10120,7 +10488,11 @@ Bool TEncSearch::predMixedIntraBCInterSearch( TComDataCU * pcCU,
         m_pcRdCost->selectMotionLambda( true, 0, pcCU->getCUTransquantBypass( partAddr ) );
         m_pcRdCost->setCostScale( 0 );
         AMVPInfo currAMVPInfo;
-        xEstimateMvPredAMVP( pcCU, pcOrgYuv, partIdx, REF_PIC_LIST_0, pcCU->getSlice()->getNumRefIdx( REF_PIC_LIST_0 ) - 1, bvPred[0], false, &biPDistTemp );
+        xEstimateMvPredAMVP( pcCU, pcOrgYuv,
+#if PCC_RDO_EXT
+                            pcOccupancyYuv,
+#endif
+                            partIdx, REF_PIC_LIST_0, pcCU->getSlice()->getNumRefIdx( REF_PIC_LIST_0 ) - 1, bvPred[0], false, &biPDistTemp );
 
         bvPred[0] = pcCU->getCUMvField( REF_PIC_LIST_0 )->getAMVPInfo()->m_acMvCand[0];
         bvPred[1] = pcCU->getCUMvField( REF_PIC_LIST_0 )->getAMVPInfo()->m_acMvCand[1];
@@ -10338,7 +10710,11 @@ Bool TEncSearch::predMixedIntraBCInterSearch( TComDataCU * pcCU,
           {
             TComMv cMv = iMvCandList[4*refList + 2*refIdx + partIdx];
 
-            xEstimateMvPredAMVP( pcCU, pcOrgYuv, partIdx, eRefPicList, refIdx, mvPred[0], false, &biPDistTemp );
+            xEstimateMvPredAMVP( pcCU, pcOrgYuv,
+#if PCC_RDO_EXT
+                                pcOccupancyYuv,
+#endif
+                                partIdx, eRefPicList, refIdx, mvPred[0], false, &biPDistTemp );
             Int mvpIdx;// = pcCU->getMVPIdx(eRefPicList, partAddr);
 
             Distortion  tempCost0 = 0;
@@ -10416,7 +10792,11 @@ Bool TEncSearch::predMixedIntraBCInterSearch( TComDataCU * pcCU,
         Distortion MRGCost = std::numeric_limits<Distortion>::max();
         pcCU->setMergeFlagSubParts( true, partAddr, partIdx, depth );
 
-        xMergeEstimation( pcCU, pcOrgYuv, partIdx, MRGInterDir, cMRGMvField[combo], MRGIndex, MRGCost, cMvFieldNeighbours[combo], uhInterDirNeighbours[combo], numValidMergeCand[combo], 1 );
+        xMergeEstimation( pcCU, pcOrgYuv, partIdx, MRGInterDir, cMRGMvField[combo], MRGIndex, MRGCost, cMvFieldNeighbours[combo], uhInterDirNeighbours[combo], numValidMergeCand[combo],
+#if PCC_RDO_EXT
+                        pcOccupancyYuv,
+#endif
+                         1 );
         pcCU->getCUMvField( REF_PIC_LIST_0 )->setAllRefIdx( -1, ePartSize, partAddr, 0, partIdx );
         pcCU->getCUMvField( REF_PIC_LIST_1 )->setAllRefIdx( -1, ePartSize, partAddr, 0, partIdx );
 
@@ -10963,6 +11343,9 @@ Void TEncSearch::xIntraBlockCopyEstimation( TComDataCU *pcCU,
                                             Distortion &cost,
                                             Bool        bUse1DSearchFor8x8,
                                             Bool        testOnlyPred
+#if PCC_RDO_EXT
+                                           , TComYuv* pcOccupancyYuv
+#endif
                                            )
 {
   UInt          partAddr;
@@ -11006,6 +11389,11 @@ Void TEncSearch::xIntraBlockCopyEstimation( TComDataCU *pcCU,
 
   TComMv      cMvPred = *pcMvPred;
 
+#if PCC_RDO_EXT
+  Pel* pOcc = pcOccupancyYuv->getAddr(COMPONENT_Y, pcCU->getCtuRsAddr(), pcCU->getZorderIdxInCtu() + partAddr);
+  int iStrideOcc = pcOccupancyYuv->getStride(COMPONENT_Y);
+#endif
+  
   // assume that intra BV is integer-pel precision
   xSetIntraSearchRange   ( pcCU, cMvPred, partAddr, roiWidth, roiHeight, cMvSrchRngLT, cMvSrchRngRB );
 
@@ -11017,7 +11405,11 @@ Void TEncSearch::xIntraBlockCopyEstimation( TComDataCU *pcCU,
   m_pcRdCost->setCostScale  ( 0 );
 
   //  Do integer search
-  xIntraPatternSearch( pcCU, iPartIdx, partAddr, &cPattern, piRefY, refStride, &cMvSrchRngLT, &cMvSrchRngRB, rcMv, cost, roiWidth, roiHeight, bUse1DSearchFor8x8, testOnlyPred );
+  xIntraPatternSearch( pcCU, iPartIdx, partAddr, &cPattern, piRefY, refStride, &cMvSrchRngLT, &cMvSrchRngRB, rcMv, cost, roiWidth, roiHeight, bUse1DSearchFor8x8, testOnlyPred
+#if PCC_RDO_EXT
+                           , pOcc, iStrideOcc
+#endif
+                      );
   //printf("cost = %d\n", cost);
 }
 
@@ -11290,6 +11682,10 @@ Void TEncSearch::xIntraPatternSearch( TComDataCU  *pcCU,
                                       Int          roiHeight,
                                       Bool         bUse1DSearchFor8x8,
                                       Bool         testOnlyPred
+#if PCC_RDO_EXT
+                                    , Pel*         pOcc,
+                                      Int          iStrideOcc
+#endif
                                       )
 {
   const Int   srchRngHorLeft   = pcMvSrchRngLT->getHor();
@@ -11324,6 +11720,10 @@ Void TEncSearch::xIntraPatternSearch( TComDataCU  *pcCU,
     cMVCand[cand].set(0,0);
   }
 
+#if PCC_RDO_EXT
+  m_cDistParam.pOccupancy = pOcc;
+  m_cDistParam.iStrideOccupancy = iStrideOcc;
+#endif
   //-- jclee for using the SAD function pointer
   m_pcRdCost->setDistParam( pcPatternKey, piRefY, refStride,  m_cDistParam );
 
@@ -12002,7 +12402,11 @@ Int TEncSearch::xIntraBCHashTableIndex(TComDataCU* pcCU, Int posX, Int posY, Int
   return hashIdx;
 }
 
-Void TEncSearch::xIntraBCHashSearch( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int partIdx, TComMv* pcMvPred, TComMv& rcMv, UInt intraBCECost)
+Void TEncSearch::xIntraBCHashSearch( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int partIdx, TComMv* pcMvPred, TComMv& rcMv, UInt intraBCECost
+#if PCC_RDO_EXT
+                           , TComYuv* pcOccupancyYuv
+#endif
+)
 {
   UInt      partAddr;
   Int       roiWidth;
@@ -12064,6 +12468,10 @@ Void TEncSearch::xIntraBCHashSearch( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int pa
   m_pcRdCost->selectMotionLambda( true, 0, pcCU->getCUTransquantBypass(partAddr) );
   m_pcRdCost->setPredictor(*pcMvPred);
   m_pcRdCost->setCostScale  ( 0 );
+#if PCC_RDO_EXT
+  m_cDistParam.pOccupancy =pcOccupancyYuv->getAddr(COMPONENT_Y);
+  m_cDistParam.iStrideOccupancy = pcOccupancyYuv->getStride(COMPONENT_Y);
+#endif
   m_pcRdCost->setDistParam( &cPattern, piRefY, refStride,  m_cDistParam );
 
   setDistParamComp(COMPONENT_Y);
@@ -12293,7 +12701,12 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
                                                 TComTU         &rTu,
                                                 TComYuv*       pcOrgResi,
                                                 ACTRDTestTypes eACTRDType
-                                                DEBUG_STRING_FN_DECLARE(sDebug) )
+                                                DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                               ,TComYuv*    pcOccupancyYuv
+#endif
+             
+                                               )
 {
   TComDataCU *pcCU          = rTu.getCU();
   const UInt absPartIdx     = rTu.GetAbsPartIdxTU();
@@ -12567,12 +12980,20 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
 
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           m_pcQTTempTComYuv[QTTempAccessLayer].getStride( compID ), pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                                         , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                         ); // initialized with zero residual distortion
                 }
                 else
                 {
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID)
+#if PCC_RDO_EXT
+                                                         , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                  ; // initialized with zero residual distortion
                 }
 
                 m_pcEntropyCoder->encodeQtCbfZero( rTu, toChannelType(compID) );
@@ -12627,7 +13048,11 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
                                                           m_pcQTTempTComYuv[QTTempAccessLayer].getStride(compID),
                                                           pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           pcResi->getStride(compID),
-                                                          tuCompRect.width, tuCompRect.height, compID);
+                                                          tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                              , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                         );
 
                   currCompCost = m_pcRdCost->calcRdCost(currCompBits, currCompDist);
 
@@ -12735,13 +13160,25 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
 
         const TComRectangle &tuCompRect = rTu.getRect(COMPONENT_Y);
         singleDistComp[colorSpaceId][COMPONENT_Y ] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), m_pcQTTempTComYuv[QTTempAccessLayer].getStride(COMPONENT_Y),
-                                                                               pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y );
+                                                                               pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Y), pcOccupancyYuv->getStride(COMPONENT_Y)
+#endif
+                                                                             );
 
         const TComRectangle &tuCompRectC = rTu.getRect(COMPONENT_Cb);
         singleDistComp[colorSpaceId][COMPONENT_Cb] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), m_pcQTTempTComYuv[QTTempAccessLayer].getStride(COMPONENT_Cb),
-                                                                               pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb );
+                                                                               pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cb), pcOccupancyYuv->getStride(COMPONENT_Cb)
+#endif
+                                                                             );
         singleDistComp[colorSpaceId][COMPONENT_Cr] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), m_pcQTTempTComYuv[QTTempAccessLayer].getStride(COMPONENT_Cr),
-                                                                               pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr );
+                                                                               pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                                             );
       }
 
       m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ depth ][ CI_QT_TRAFO_ROOT ] );
@@ -12880,7 +13317,11 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
 
       do
       {
-        xEstimateInterResidualQTTUCSC( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, tuRecurseChild, pcOrgResi, eACTRDType DEBUG_STRING_PASS_INTO(sSplitString));
+        xEstimateInterResidualQTTUCSC( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, tuRecurseChild, pcOrgResi, eACTRDType DEBUG_STRING_PASS_INTO(sSplitString)
+#if PCC_RDO_EXT
+                                    , pcOccupancyYuv
+#endif
+                                      );
       }
       while ( tuRecurseChild.nextSection(rTu) ) ;
 
diff --git a/source/Lib/TLibEncoder/TEncSearch.h b/source/Lib/TLibEncoder/TEncSearch.h
index 39719e6..36aa383 100644
--- a/source/Lib/TLibEncoder/TEncSearch.h
+++ b/source/Lib/TLibEncoder/TEncSearch.h
@@ -234,16 +234,23 @@ protected:
   } IntTZSearchStruct;
 
   // sub-functions for ME
-  __inline Void xTZSearchHelp         ( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const Int iSearchX, const Int iSearchY, const UChar ucPointNr, const UInt uiDistance );
+  __inline Void xTZSearchHelp         ( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const Int iSearchX, const Int iSearchY, const UChar ucPointNr, const UInt uiDistance);
   __inline Void xTZ2PointSearch       ( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const TComMv* const pcMvSrchRngLT, const TComMv* const pcMvSrchRngRB );
   __inline Void xTZ8PointSquareSearch ( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const TComMv* const pcMvSrchRngLT, const TComMv* const pcMvSrchRngRB, const Int iStartX, const Int iStartY, const Int iDist );
   __inline Void xTZ8PointDiamondSearch( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const TComMv* const pcMvSrchRngLT, const TComMv* const pcMvSrchRngRB, const Int iStartX, const Int iStartY, const Int iDist, const Bool bCheckCornersAtDist1, Bool bSkipLeftDist2 = false, Bool bSkipTopDist2 = false  );
 
-  Void xGetInterPredictionError( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, Distortion& ruiSAD, Bool Hadamard );
+  Void xGetInterPredictionError( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, Distortion& ruiSAD, Bool Hadamard
+#if PCC_RDO_EXT
+                                  ,TComYuv*    pcOccupancyYuv
+#endif
+    );
 
 public:
   Void  estIntraPredLumaQT      ( TComDataCU* pcCU,
                                   TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
                                   TComYuv*    pcPredYuv,
                                   TComYuv*    pcResiYuv,
                                   TComYuv*    pcRecoYuv,
@@ -252,6 +259,9 @@ public:
 
   Void  estIntraPredChromaQT    ( TComDataCU* pcCU,
                                   TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
                                   TComYuv*    pcPredYuv,
                                   TComYuv*    pcResiYuv,
                                   TComYuv*    pcRecoYuv,
@@ -265,6 +275,9 @@ public:
                                   TComYuv*    pcResiYuv,
                                   TComYuv*    pcRecoYuv
                                   DEBUG_STRING_FN_DECLARE(sDebug),
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
                                   Bool        bUseRes = false
 #if AMP_MRG
                                  ,Bool        bUseMRG = false
@@ -282,7 +295,12 @@ public:
                                   Bool        bSkipResidual,
                                   TComYuv*    pcYuvNoCorrResi,
                                   ACTRDTestTypes eACTRDTestType
+#if PCC_RDO_EXT
+                                  DEBUG_STRING_FN_DECLARE(sDebug),
+                                  TComYuv*    pcYuvOccupancy = NULL);
+#else
                                   DEBUG_STRING_FN_DECLARE(sDebug) );
+#endif
 
   /// set ME search range
   Void setAdaptiveSearchRange   ( Int iDir, Int iRefIdx, Int iSearchRange) { assert(iDir < MAX_NUM_REF_LIST_ADAPT_SR && iRefIdx<Int(MAX_IDX_ADAPT_SR)); m_aaiAdaptSR[iDir][iRefIdx] = iSearchRange; }
@@ -298,6 +316,9 @@ public:
                                   ACTRDTestTypes eACTRDTestType,
                                   Bool           bReuseIntraMode
                                   DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                 ,TComYuv*      pcYuvOccupancy
+#endif
                                  );
 
   Void  estIntraPredLumaQTWithModeReuse ( TComDataCU* pcCU,
@@ -306,6 +327,9 @@ public:
                                           TComYuv*    pcResiYuv,
                                           TComYuv*    pcRecoYuv,
                                           Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                 ,TComYuv*      pcYuvOccupancy
+#endif
                                     );
 
   Void  estIntraPredChromaQTWithModeReuse ( TComDataCU* pcCU,
@@ -314,6 +338,10 @@ public:
                                             TComYuv*    pcResiYuv,
                                             TComYuv*    pcRecoYuv,
                                             Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                 ,TComYuv*      pcYuvOccupancy
+#endif
+
                                           );
 
   Bool isBlockVectorValid( Int xPos, Int yPos, Int width, Int height, TComDataCU *pcCU,
@@ -328,6 +356,9 @@ public:
                                   Bool        bUse1DSearchFor8x8,
                                   Bool        bUseRes,
                                   Bool        testOnlyPred
+#if PCC_RDO_EXT
+                                 , TComYuv* pcOccupancyYuv
+#endif
                                 );
 
   Bool predMixedIntraBCInterSearch( TComDataCU* pcCU,
@@ -338,6 +369,9 @@ public:
                                     DEBUG_STRING_FN_DECLARE( sDebug ),
                                     TComMv*     iMVCandList,
                                     Bool        bUseRes
+#if PCC_RDO_EXT
+                                   ,TComYuv* pcOccupancyYuv
+#endif
                                     );
 
   Void xIntraBlockCopyEstimation( TComDataCU*  pcCU,
@@ -348,6 +382,9 @@ public:
                                   Distortion&  cost,
                                   Bool         bUse1DSearchFor8x8,
                                   Bool         testOnlyPred
+#if PCC_RDO_EXT
+                                 , TComYuv* pcOccupancyYuv
+#endif
                                 );
 
   Void addToSortList            ( list<BlockHash>& listBlockHash,
@@ -476,11 +513,18 @@ public:
                                   Int          roiHeight,
                                   Bool         bUse1DSearchFor8x8,
                                   Bool         testOnlyPred
+#if PCC_RDO_EXT
+                                 , Pel* pOcc, int iStrideOcc
+#endif
                                 );
 
   Void updateBVMergeCandLists(int roiWidth, int roiHeight, TComMv* mvCand);
 
-  UInt paletteSearch  (TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSize);
+  UInt paletteSearch  (TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSize
+#if PCC_RDO_EXT
+    , TComYuv* pcYuvOccupancy
+#endif
+                       );
 
   Void deriveRunAndCalcBits( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcRecoYuv, UInt& minBits, Bool bReset, PaletteScanMode paletteScanMode);
 
@@ -498,6 +542,9 @@ public:
                                 TComMv* pcMvPred,
                                 TComMv& rcMv,
                                 UInt intraBCECost
+#if PCC_RDO_EXT
+                               , TComYuv* pcOccupancyYuv
+#endif
                               );
 
   Void xIntraBCHashTableUpdate( TComDataCU* pcCU,
@@ -542,6 +589,9 @@ protected:
                                    Bool          bRealCoeff );
 
   Void  xIntraCodingTUBlock       (       TComYuv*      pcOrgYuv,
+#if PCC_RDO_EXT
+                                          TComYuv*      pcOccupancyYuv,
+#endif
                                           TComYuv*      pcPredYuv,
                                           TComYuv*      pcResiYuv,
                                           Pel           resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
@@ -563,7 +613,12 @@ protected:
 #endif
                                     Double&      dRDCost,
                                     TComTU      &rTu
+#if PCC_RDO_EXT
+                                    DEBUG_STRING_FN_DECLARE(sDebug),
+                                    TComYuv*     pcOccupancyYuv = NULL);
+#else
                                     DEBUG_STRING_FN_DECLARE(sDebug));
+#endif
 
   Void  xSetIntraResultLumaQT     ( TComYuv*     pcRecoYuv,
                                     TComTU &rTu);
@@ -591,7 +646,12 @@ protected:
                                     Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                     Distortion& ruiDist,
                                     TComTU      &rTu
+#if PCC_RDO_EXT
+                                    DEBUG_STRING_FN_DECLARE(sDebug),
+                                    TComYuv*    pcOccupancyYuv = NULL);
+#else
                                     DEBUG_STRING_FN_DECLARE(sDebug));
+#endif
 
   Void  xSetIntraResultChromaQT   ( TComYuv*    pcRecoYuv, TComTU &rTu);
 
@@ -605,6 +665,9 @@ protected:
 
   Void xEstimateMvPredAMVP        ( TComDataCU* pcCU,
                                     TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                   TComYuv* pcOccupancyYuv,
+#endif
                                     UInt        uiPartIdx,
                                     RefPicList  eRefPicList,
                                     Int         iRefIdx,
@@ -632,6 +695,9 @@ protected:
                                     Int         iRefIdx,
                                     Int         iSizeX,
                                     Int         iSizeY
+#if PCC_RDO_EXT
+                                    ,TComYuv* pcOccupancy
+#endif
                                    );
 
 
@@ -649,6 +715,9 @@ protected:
                                     TComMvField* cMvFieldNeighbours,
                                     UChar*       uhInterDirNeighbours,
                                     Int&         numValidMergeCand,
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
                                     Int          iCostCalcType = 0
                                    );
 
@@ -665,6 +734,9 @@ protected:
 
   Void xMotionEstimation          ( TComDataCU*  pcCU,
                                     TComYuv*     pcYuvOrg,
+#if PCC_RDO_EXT
+                                    TComYuv* pcOccupancyYuv,
+#endif
                                     Int          iPartIdx,
                                     RefPicList   eRefPicList,
                                     TComMv*      pcMvPred,
@@ -672,7 +744,8 @@ protected:
                                     TComMv&      rcMv,
                                     UInt&        ruiBits,
                                     Distortion&  ruiCost,
-                                    Bool         bBi = false  );
+                                    Bool         bBi = false
+                                   );
 
   Void xTZSearch                  ( const TComDataCU* const  pcCU,
                                     const TComPattern* const pcPatternKey,
@@ -684,6 +757,9 @@ protected:
                                     Distortion&              ruiSAD,
                                     const TComMv* const      pIntegerMv2Nx2NPred,
                                     const Bool               bExtendedSettings
+#if PCC_RDO_EXT
+                                   , const Pel* piOccupancy, Int iOccupancyStride
+#endif
                                     );
 
   Void xTZSearchSelective         ( const TComDataCU* const  pcCU,
@@ -716,6 +792,10 @@ protected:
                                     const TComPattern* const pcPatternKey,
                                     const Pel* const         piRefY,
                                     const Int                iRefStride,
+#if PCC_RDO_EXT
+                                   const Pel* piOccupancy,
+                                   Int iOccupancyStride,
+#endif
                                     const TComMv* const      pcMvSrchRngLT,
                                     const TComMv* const      pcMvSrchRngRB,
                                     TComMv&                  rcMv,
@@ -726,6 +806,9 @@ protected:
   Void xPatternSearch             ( const TComPattern* const pcPatternKey,
                                     const Pel*               piRefY,
                                     const Int                iRefStride,
+#if PCC_RDO_EXT
+                                   TComYuv* pcOccupancyYuv,
+#endif
                                     const TComMv* const      pcMvSrchRngLT,
                                     const TComMv* const      pcMvSrchRngRB,
                                     TComMv&      rcMv,
@@ -752,7 +835,11 @@ protected:
 
 
   Void xEncodeInterResidualQT( const ComponentID compID, TComTU &rTu );
+#if PCC_RDO_EXT
+  Void xEstimateInterResidualQT(TComYuv* pcResi, Double &rdCost, UInt &ruiBits, Distortion &ruiDist, Distortion *puiZeroDist, TComTU &rTu DEBUG_STRING_FN_DECLARE(sDebug), TComYuv* pcOrgResi = NULL, TComYuv* pcOccupancy = NULL);
+#else
   Void xEstimateInterResidualQT( TComYuv* pcResi, Double &rdCost, UInt &ruiBits, Distortion &ruiDist, Distortion *puiZeroDist, TComTU &rTu DEBUG_STRING_FN_DECLARE(sDebug), TComYuv* pcOrgResi = NULL );
+#endif
   Void xSetInterResidualQTData( TComYuv* pcResi, Bool bSpatial, TComTU &rTu  );
 
   UInt  xModeBitsIntra ( TComDataCU* pcCU, UInt uiMode, UInt uiPartOffset, UInt uiDepth, const ChannelType compID );
@@ -790,6 +877,9 @@ protected:
                                     Bool           bTestMaxTUSize,
                                     ACTRDTestTypes eACTRDTestType
                                     DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                  , TComYuv* pcOccupancyYuv
+#endif
                                    );
 
   Void  xRecurIntraCodingQTCSC    ( TComYuv*     pcOrgYuv,
@@ -801,9 +891,16 @@ protected:
                                     TComTU&      rTu,
                                     Bool         bTestMaxTUSize
                                     DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                   ,TComYuv*    pcOccupancyYuv
+#endif
                                   );
 
-  Void xEstimateInterResidualQTTUCSC( TComYuv* pcResi, Double &rdCost, UInt &bits, Distortion &dist, TComTU &rTu, TComYuv* pcOrgResi, ACTRDTestTypes eACTRDtype DEBUG_STRING_FN_DECLARE(sDebug) );
+  Void xEstimateInterResidualQTTUCSC( TComYuv* pcResi, Double &rdCost, UInt &bits, Distortion &dist, TComTU &rTu, TComYuv* pcOrgResi, ACTRDTestTypes eACTRDtype DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                   ,TComYuv*    pcOccupancyYuv
+#endif
+                                     );
 
   // Palette related functions
   Void  xInitTBCTable();
diff --git a/source/Lib/TLibEncoder/TEncSlice.h b/source/Lib/TLibEncoder/TEncSlice.h
index 3c21748..3516595 100644
--- a/source/Lib/TLibEncoder/TEncSlice.h
+++ b/source/Lib/TLibEncoder/TEncSlice.h
@@ -136,6 +136,11 @@ public:
   // misc. functions
   Void    setSearchRange      ( TComSlice* pcSlice  );                                  ///< set ME range adaptively
 
+#if PCC_RDO_EXT
+  Void setUsePCCRDO(bool usePCCRDO){
+    m_pcRdCost->setPCCRDO(usePCCRDO);
+  }
+#endif
   TEncCu*        getCUEncoder() { return m_pcCuEncoder; }                        ///< CU encoder
   Void    xDetermineStartAndBoundingCtuTsAddr  ( UInt& startCtuTsAddr, UInt& boundingCtuTsAddr, TComPic* pcPic );
   UInt    getSliceIdx()         { return m_uiSliceIdx;                    }
diff --git a/source/Lib/TLibEncoder/TEncTop.cpp b/source/Lib/TLibEncoder/TEncTop.cpp
index 14f1466..f02eb6d 100644
--- a/source/Lib/TLibEncoder/TEncTop.cpp
+++ b/source/Lib/TLibEncoder/TEncTop.cpp
@@ -365,9 +365,18 @@ Void TEncTop::encode( Bool flush, TComPicYuv* pcPicYuvOrg, TComPicYuv* pcPicYuvT
   // compress GOP
 #if PCC_ME_EXT
   if (m_usePCCExt) printf("\n\tPCC ME GOP #1 ACTIVE\n");
+#if PCC_RDO_EXT
+  if (m_usePCCRDOExt) printf("\n\tPCC RDO GOP #1 ACTIVE\n");
+  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl(), m_usePCCExt, m_usePCCRDOExt);
+#else
   m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl(), m_usePCCExt);
+#endif
+#else
+#if PCC_RDO_EXT
+  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl(), m_usePCCRDOExt);
 #else
   m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl());
+#endif
 #endif
 
   if ( m_RCEnableRateControl )
@@ -474,9 +483,18 @@ Void TEncTop::encode(Bool flush, TComPicYuv* pcPicYuvOrg, TComPicYuv* pcPicYuvTr
       // compress GOP
 #if PCC_ME_EXT
       if (m_usePCCExt) printf("\n\tPCC ME GOP #2 ACTIVE\n");
-	  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl(), m_usePCCExt);
+#if PCC_RDO_EXT
+      if (m_usePCCRDOExt) printf("\n\tPCC RDO GOP #2 ACTIVE\n");
+      m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl(), m_usePCCExt, m_usePCCRDOExt);
+#else
+      m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, ipCSC, snrCSC, getOutputLogControl(), m_usePCCExt);
+#endif
+#else
+#if PCC_RDO_EXT
+      m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, true, isTff, snrCSC, getOutputLogControl(), m_usePCCRDOExt);
 #else
       m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, true, isTff, ipCSC, snrCSC, getOutputLogControl());
+#endif
 #endif
       iNumEncoded += m_iNumPicRcvd;
       m_uiNumAllPicCoded += m_iNumPicRcvd;
